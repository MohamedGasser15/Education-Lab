@using EduLab_MVC.Models.DTOs.Category
@model IEnumerable<CategoryDTO>
@{
    ViewData["Title"] = "إدارة التصنيفات";
}

<link rel="stylesheet" href="~/css/Admin/category.css">
<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        backdrop-filter: blur(5px);
    }

    .modal-container {
        background-color: white;
        border-radius: 0.75rem;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 28rem;
        overflow: hidden;
    }

    .dark .modal-container {
        background-color: #1f2937;
    }

    .modal-header {
        display: flex;
        align-items: center;
        padding: 1.25rem 1.5rem;
        border-bottom: 1px solid #e5e7eb;
    }

    .dark .modal-header {
        border-bottom-color: #374151;
    }

    .modal-icon {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 2.5rem;
        height: 2.5rem;
        border-radius: 50%;
        margin-left: 1rem;
    }

        .modal-icon.add {
            background-color: #dbeafe;
            color: #1d4ed8;
        }

        .modal-icon.edit {
            background-color: #e0e7ff;
            color: #4f46e5;
        }

        .modal-icon.delete {
            background-color: #fee2e2;
            color: #dc2626;
        }

    .dark .modal-icon.add {
        background-color: #1e3a8a;
        color: #93c5fd;
    }

    .dark .modal-icon.edit {
        background-color: #3730a3;
        color: #a5b4fc;
    }

    .dark .modal-icon.delete {
        background-color: #7f1d1d;
        color: #fca5a5;
    }

    .modal-title {
        font-size: 1.125rem;
        font-weight: 600;
        color: #111827;
    }

    .dark .modal-title {
        color: #f3f4f6;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .modal-message {
        color: #374151;
        margin-bottom: 1rem;
    }

    .dark .modal-message {
        color: #e5e7eb;
    }

    .modal-highlight {
        font-weight: 600;
        color: #1d4ed8;
    }

    .dark .modal-highlight {
        color: #60a5fa;
    }

    .modal-warning {
        display: flex;
        align-items: flex-start;
        padding: 0.75rem;
        border-radius: 0.375rem;
        background-color: #fef2f2;
        color: #b91c1c;
    }

    .dark .modal-warning {
        background-color: #7f1d1d;
        color: #fecaca;
    }

    .modal-warning-icon {
        margin-left: 0.5rem;
        margin-top: 0.125rem;
    }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        padding: 1rem 1.5rem;
        border-top: 1px solid #e5e7eb;
    }

    .dark .modal-footer {
        border-top-color: #374151;
    }

    .modal-btn {
        display: inline-flex;
        align-items: center;
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        font-weight: 500;
        transition: all 0.2s;
        margin-right: 0.5rem;
    }

        .modal-btn:last-child {
            margin-right: 0;
        }

    .modal-btn-cancel {
        background-color: #f3f4f6;
        color: #374151;
        border: 1px solid #d1d5db;
    }

    .dark .modal-btn-cancel {
        background-color: #374151;
        color: #f3f4f6;
        border-color: #4b5563;
    }

    .modal-btn-cancel:hover {
        background-color: #e5e7eb;
    }

    .dark .modal-btn-cancel:hover {
        background-color: #4b5563;
    }

    .modal-btn-confirm {
        background-color: #2563eb;
        color: white;
        border: 1px solid #2563eb;
    }

        .modal-btn-confirm:hover {
            background-color: #1d4ed8;
        }

    /* Custom Checkbox */
    .custom-checkbox {
        width: 1.25rem;
        height: 1.25rem;
        border-radius: 0.25rem;
        border: 1px solid #d1d5db;
        appearance: none;
        -webkit-appearance: none;
        cursor: pointer;
        transition: all 0.2s;
        position: relative;
    }

    .dark .custom-checkbox {
        border-color: #4b5563;
        background-color: #1f2937;
    }

    .custom-checkbox:checked {
        background-color: #2563eb;
        border-color: #2563eb;
    }

        .custom-checkbox:checked::after {
            content: "✓";
            position: absolute;
            color: white;
            font-size: 0.75rem;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

    /* Action Buttons */
    .action-btn {
        width: 2rem;
        height: 2rem;
        border-radius: 0.375rem;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s;
    }

    /* Bulk Actions */
    #bulkActionsContainer {
        background-color: #f0f9ff;
        border: 1px solid #e0f2fe;
    }

    .dark #bulkActionsContainer {
        background-color: #082f49;
        border-color: #0c4a6e;
    }

    /* Pagination Styles */
    .pagination-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 2.5rem;
        height: 2.5rem;
        border-radius: 0.375rem;
        border: 1px solid #d1d5db;
        color: #4b5563;
        font-weight: 500;
    }

    .dark .pagination-btn {
        border-color: #4b5563;
        color: #d1d5db;
    }

    .pagination-btn.active {
        background-color: #2563eb;
        color: white;
        border-color: #2563eb;
    }

    .pagination-btn.disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

</style>
<div class="container mx-auto px-4 py-8">
    <!-- Header Section -->
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
        <div>
            <h1 class="text-3xl font-bold text-gray-900 dark:text-white">
                <i class="fas fa-folder text-blue-500 mr-3"></i>
                إدارة التصنيفات
            </h1>
            <p class="text-gray-500 dark:text-gray-400 mt-2">
                عرض وإدارة جميع التصنيفات المتاحة في النظام
            </p>
        </div>

        <button id="add-category-btn" onclick="openModal('addCategoryModal')"
                class="flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-xl shadow-md hover:shadow-lg transition-all">
            <i class="fas fa-plus"></i>
            <span>إضافة تصنيف جديد</span>
        </button>
    </div>

    <!-- Filter Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-5 mb-8">
        <div class="filter-card p-5 shadow-sm border border-gray-100 dark:border-gray-700">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">إجمالي التصنيفات</p>
                    <h3 class="text-2xl font-bold text-gray-800 dark:text-white">@Model.Count()</h3>
                </div>
                <div class="p-3 rounded-full bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-300">
                    <i class="fas fa-folder text-lg"></i>
                </div>
            </div>
        </div>

        <div class="filter-card p-5 shadow-sm border border-gray-100 dark:border-gray-700">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">تصنيفات نشطة</p>
                    <h3 class="text-2xl font-bold text-gray-800 dark:text-white">@Model.Count()</h3>
                </div>
                <div class="p-3 rounded-full bg-green-100 dark:bg-green-900 text-green-600 dark:text-green-300">
                    <i class="fas fa-check-circle text-lg"></i>
                </div>
            </div>
        </div>

        <div class="filter-card p-5 shadow-sm border border-gray-100 dark:border-gray-700">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">تصنيفات تحتوي على كورسات</p>
                    <h3 class="text-2xl font-bold text-gray-800 dark:text-white">@Model.Count(c => c.CoursesCount > 0)</h3>
                </div>
                <div class="p-3 rounded-full bg-purple-100 dark:bg-purple-900 text-purple-600 dark:text-purple-300">
                    <i class="fas fa-book-open text-lg"></i>
                </div>
            </div>
        </div>

        <div class="filter-card p-5 shadow-sm border border-gray-100 dark:border-gray-700">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">أحدث تصنيف</p>
                    <h3 class="text-2xl font-bold text-gray-800 dark:text-white">
                        @(Model.OrderByDescending(c => c.CreatedAt).FirstOrDefault()?.CreatedAt.ToString("yyyy-MM-dd"))
                    </h3>
                </div>
                <div class="p-3 rounded-full bg-yellow-100 dark:bg-yellow-900 text-yellow-600 dark:text-yellow-300">
                    <i class="fas fa-clock text-lg"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Search and Filter Section -->
    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-md p-5 mb-8">
        <div class="flex flex-col md:flex-row gap-4 items-center">
            <div class="relative flex-1 w-full">
                <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                    <i class="fas fa-search text-gray-400"></i>
                </div>
                <input type="text" id="search-categories" class="w-full pr-10 pl-4 py-2 border border-gray-300 dark:border-gray-700 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white" placeholder="ابحث عن تصنيف...">
            </div>

            <button id="resetFilters" class="px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-xl text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition w-full md:w-auto">
                <i class="fas fa-undo-alt mr-2"></i>
                إعادة تعيين
            </button>
        </div>
    </div>

    <!-- Bulk Actions Container -->
    <div id="bulkActionsContainer" class="hidden bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg mb-4 flex items-center justify-between border border-blue-100 dark:border-blue-900/30">
        <div class="selected-count text-sm text-blue-700 dark:text-blue-300">
            <i class="fas fa-folder mr-2"></i>
            <span id="selectedCount">0</span> تصنيف محدد
        </div>
        <div class="bulk-actions-buttons flex space-x-2 space-x-reverse">
            <select id="bulkAction" class="border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white">
                <option value="">اختر إجراء</option>
                <option value="delete">حذف المحدد</option>
            </select>
            <button id="delete-selected-btn" class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white text-sm rounded-lg transition">
                تطبيق
            </button>
        </div>
    </div>

    <!-- Categories Table -->
    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden">
        <div class="overflow-x-auto">
            <table class="w-full">
                <thead class="bg-gray-50 dark:bg-gray-700">
                    <tr>
                        <th scope="col" class="px-6 py-4 text-right font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                            <input type="checkbox" id="select-all" class="custom-checkbox">
                        </th>
                        <th scope="col" class="px-6 py-4 text-right font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                            اسم التصنيف
                        </th>
                        <th scope="col" class="px-6 py-4 text-right font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                            عدد الكورسات
                        </th>
                        <th scope="col" class="px-6 py-4 text-right font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                            تاريخ الإضافة
                        </th>
                        <th scope="col" class="px-6 py-4 text-right font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                            الإجراءات
                        </th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
                    @if (Model != null && Model.Any())
                    {
                        @foreach (var category in Model)
                        {
                            <tr class="hover:bg-gray-50 dark:hover:bg-gray-700 transition" data-category-id="@category.Category_Id">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <input type="checkbox" class="category-checkbox custom-checkbox" value="@category.Category_Id">
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <div class="flex-shrink-0 h-12 w-12 rounded-lg bg-gray-100 dark:bg-gray-600 flex items-center justify-center">
                                            <i class="fas fa-folder text-gray-500 dark:text-gray-300 text-xl"></i>
                                        </div>
                                        <div class="mr-4">
                                            <div class="text-sm font-medium text-gray-900 dark:text-white">@category.Category_Name</div>
                                            <div class="text-sm text-gray-500 dark:text-gray-400">ID: @category.Category_Id</div>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <span style="
                                                background-color: rgba(37,99,235,0.1);
                                                color: #2563eb;
                                                padding: 4px 8px;
                                                border-radius: 4px;
                                                font-size: 0.8rem;
                                                font-weight: 500;
                                            ">
                                            @if (category.CoursesCount == 0)
                                            {
                                                @:لا يوجد كورسات
                                            }
                                            else if (category.CoursesCount == 1)
                                            {
                                                @:كورس واحد
                                            }
                                            else
                                            {
                                                @($"{category.CoursesCount} كورسات")
                                            }
                                        </span>


                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    @{
                                        var timeSinceCreation = DateTime.Now - category.CreatedAt;
                                        string timeText = timeSinceCreation.TotalDays switch
                                        {
                                            >= 365 => $"منذ {(int)(timeSinceCreation.TotalDays / 365)} سنة",
                                            >= 30 => $"منذ {(int)(timeSinceCreation.TotalDays / 30)} شهر",
                                            >= 7 => $"منذ {(int)(timeSinceCreation.TotalDays / 7)} أسابيع",
                                            >= 1 => $"منذ {(int)timeSinceCreation.TotalDays} يوم",
                                            _ => "جديد"
                                        };
                                    }
                                    <div class="text-sm text-gray-900 dark:text-white">@timeText</div>
                                    <div class="text-xs text-gray-500 dark:text-gray-400">@category.CreatedAt.ToString("yyyy-MM-dd")</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <div class="flex items-center gap-2">
                                        <button class="action-btn bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-300 hover:bg-blue-200 dark:hover:bg-blue-800 edit-category-btn"
                                                onclick="openEditModal('@category.Category_Id', '@category.Category_Name')">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="action-btn bg-red-100 dark:bg-red-900 text-red-600 dark:text-red-300 hover:bg-red-200 dark:hover:bg-red-800 delete-category-btn"
                                                onclick="openDeleteModal('@category.Category_Id', '@category.Category_Name', @category.CoursesCount)">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="px-6 py-12 text-center">
                                <div class="flex flex-col items-center justify-center">
                                    <i class="fas fa-folder text-5xl text-gray-300 dark:text-gray-600 mb-4"></i>
                                    <h3 class="text-lg font-medium text-gray-700 dark:text-gray-300">لا توجد تصنيفات متاحة</h3>
                                    <p class="text-gray-500 dark:text-gray-400 mt-2 mb-4">لم يتم العثور على أي تصنيفات في النظام</p>
                                    <button id="add-category-btn-empty" onclick="openModal('addCategoryModal')"
                                            class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition flex items-center gap-2">
                                        <i class="fas fa-plus"></i>
                                        <span>إضافة تصنيف جديد</span>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="px-6 py-4 flex items-center justify-between border-t border-gray-200 dark:border-gray-700">
            <div class="hidden sm:block">
                <p class="text-sm text-gray-700 dark:text-gray-300">
                    عرض <span id="showing-from">1</span>-<span id="showing-to">10</span> من <span id="total-categories">@Model.Count()</span>
                </p>
            </div>
            <div class="flex-1 flex justify-center">
                <div class="pagination-controls flex space-x-1 space-x-reverse">
                    <button id="prev-page" class="pagination-btn disabled">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                    <div id="pagination-numbers" class="flex space-x-1 space-x-reverse"></div>
                    <button id="next-page" class="pagination-btn">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                </div>
            </div>
            <div class="hidden sm:block">
                <select id="rows-per-page" class="border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white">
                    <option value="5">5 لكل صفحة</option>
                    <option value="10" selected>10 لكل صفحة</option>
                    <option value="20">20 لكل صفحة</option>
                    <option value="50">50 لكل صفحة</option>
                    <option value="100">100 لكل صفحة</option>
                </select>
            </div>
        </div>
    </div>
</div>

<!-- Add Category Modal -->
<div id="addCategoryModal" class="modal-overlay hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="modal-container">
        <div class="modal-header">
            <div class="modal-icon add">
                <i class="fas fa-folder-plus"></i>
            </div>
            <div>
                <h3 class="modal-title">إضافة تصنيف جديد</h3>
            </div>
        </div>
        <form asp-action="Create" asp-controller="Category" asp-area="Admin" method="post" class="modal-body">
            @Html.AntiForgeryToken()
            <div class="space-y-4">
                <div class="form-group">
                    <label for="categoryName" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">اسم التصنيف*</label>
                    <div class="relative">
                        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                            <i class="fas fa-folder text-gray-400"></i>
                        </div>
                        <input type="text" name="Category_Name" id="categoryName"
                               placeholder="أدخل اسم التصنيف هنا"
                               class="w-full pr-10 pl-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-[#2563eb] focus:border-[#2563eb] dark:bg-gray-700 dark:text-white"
                               required>
                    </div>
                    <p class="mt-1 text-xs text-red-600 dark:text-red-400 hidden" id="name-error">يجب إدخال اسم التصنيف</p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" onclick="closeModal('addCategoryModal')" class="modal-btn modal-btn-cancel">
                    <i class="fas fa-times-circle"></i> إلغاء
                </button>
                <button type="submit" class="modal-btn modal-btn-confirm">
                    <i class="fas fa-save"></i> حفظ
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Edit Category Modal -->
<div id="editCategoryModal" class="modal-overlay hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="modal-container">
        <div class="modal-header">
            <div class="modal-icon edit">
                <i class="fas fa-edit"></i>
            </div>
            <div>
                <h3 class="modal-title">تعديل التصنيف</h3>
            </div>
        </div>
        <form asp-action="Update" method="post" class="modal-body">
            @Html.AntiForgeryToken()
            <input type="hidden" name="Category_Id" id="edit-category-id" />
            <div class="space-y-4">
                <div class="form-group">
                    <label for="edit-category-name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">اسم التصنيف*</label>
                    <div class="relative">
                        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                            <i class="fas fa-folder text-gray-400"></i>
                        </div>
                        <input type="text" name="Category_Name" id="edit-category-name"
                               placeholder="أدخل اسم التصنيف هنا"
                               class="w-full pr-10 pl-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-[#2563eb] focus:border-[#2563eb] dark:bg-gray-700 dark:text-white"
                               required>
                    </div>
                    <p class="mt-1 text-xs text-red-600 dark:text-red-400 hidden" id="edit-name-error">يجب إدخال اسم التصنيف</p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" onclick="closeModal('editCategoryModal')" class="modal-btn modal-btn-cancel">
                    <i class="fas fa-times-circle"></i> إلغاء
                </button>
                <button type="submit" class="modal-btn modal-btn-confirm">
                    <i class="fas fa-save"></i> حفظ التغييرات
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Delete Category Modal -->
<div id="deleteCategoryModal" class="modal-overlay hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="modal-container">
        <div class="modal-header">
            <div class="modal-icon delete">
                <i class="fas fa-trash-alt"></i>
            </div>
            <div>
                <h3 class="modal-title">تأكيد الحذف</h3>
            </div>
        </div>
        <div class="modal-body">
            <p class="modal-message">هل أنت متأكد أنك تريد حذف التصنيف <span id="delete-category-name" class="modal-highlight"></span>؟</p>
            <div id="delete-warning" class="modal-warning hidden">
                <i class="fas fa-exclamation-circle modal-warning-icon"></i>
                <p class="modal-warning-text">تحذير: هذا التصنيف يحتوي على <span id="courses-count">0</span> كورس!</p>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" onclick="closeModal('deleteCategoryModal')" class="modal-btn modal-btn-cancel">
                <i class="fas fa-times-circle"></i> إلغاء
            </button>
            <form method="post" asp-action="Delete" id="deleteForm" class="inline">
                @Html.AntiForgeryToken()
                <input type="hidden" name="id" id="delete-category-id" />
                <button type="submit" class="modal-btn modal-btn-confirm">
                    <i class="fas fa-check-circle"></i> تأكيد الحذف
                </button>
            </form>
        </div>
    </div>
</div>

<!-- Bulk Delete Confirmation Modal -->
<div id="bulkDeleteModal" class="modal-overlay hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="modal-container">
        <div class="modal-header">
            <div class="modal-icon delete">
                <i class="fas fa-trash-alt"></i>
            </div>
            <div>
                <h3 class="modal-title">تأكيد الحذف الجماعي</h3>
            </div>
        </div>
        <div class="modal-body">
            <p class="modal-message">هل أنت متأكد أنك تريد حذف <span id="bulkDeleteCount" class="modal-highlight">0</span> تصنيفات؟</p>
            <div class="modal-warning">
                <i class="fas fa-exclamation-circle modal-warning-icon"></i>
                <p class="modal-warning-text">تحذير: لا يمكن التراجع عن هذا الإجراء!</p>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" onclick="closeModal('bulkDeleteModal')" class="modal-btn modal-btn-cancel">
                <i class="fas fa-times-circle"></i> إلغاء
            </button>
            <form method="post" asp-action="BulkDelete" id="bulkDeleteForm" class="inline">
                @Html.AntiForgeryToken()
                <input type="hidden" name="ids" id="bulkDeleteCategoryIds" value="" />
                <button type="submit" class="modal-btn modal-btn-confirm">
                    <i class="fas fa-check-circle"></i> تأكيد الحذف
                </button>
            </form>
        </div>
    </div>
</div>


<script>
    // Modal Functions
    function openModal(modalId) {
        document.getElementById(modalId).classList.remove('hidden');
    }

    function closeModal(modalId) {
        document.getElementById(modalId).classList.add('hidden');
    }

    function openEditModal(id, name) {
        document.getElementById('edit-category-id').value = id;
        document.getElementById('edit-category-name').value = name;
        openModal('editCategoryModal');
    }

    function openDeleteModal(id, name, coursesCount) {
        document.getElementById('delete-category-id').value = id;
        document.getElementById('delete-category-name').textContent = name;

        const warningDiv = document.getElementById('delete-warning');
        if (coursesCount > 0) {
            document.getElementById('courses-count').textContent = coursesCount;
            warningDiv.classList.remove('hidden');
        } else {
            warningDiv.classList.add('hidden');
        }

        openModal('deleteCategoryModal');
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
        if (event.target.classList.contains('modal-overlay')) {
            const modals = document.querySelectorAll('.modal-overlay');
            modals.forEach(modal => {
                modal.classList.add('hidden');
            });
        }
    }

    // Bulk actions functionality
    document.addEventListener('DOMContentLoaded', function() {
        const selectAllCheckbox = document.getElementById('select-all');
        const categoryCheckboxes = document.querySelectorAll('.category-checkbox');
        const bulkActionsContainer = document.getElementById('bulkActionsContainer');
        const selectedCountElement = document.getElementById('selectedCount');
        const bulkActionSelect = document.getElementById('bulkAction');
        const deleteSelectedBtn = document.getElementById('delete-selected-btn');

        // Select all checkbox functionality
        if (selectAllCheckbox) {
            selectAllCheckbox.addEventListener('change', function() {
                const isChecked = this.checked;
                categoryCheckboxes.forEach(checkbox => {
                    checkbox.checked = isChecked;
                });
                updateBulkActionsUI();
            });
        }

        // Individual checkbox functionality
        categoryCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                updateBulkActionsUI();
                updateSelectAllCheckbox();
            });
        });

        // Update bulk actions UI based on selected checkboxes
        function updateBulkActionsUI() {
            const selectedCount = document.querySelectorAll('.category-checkbox:checked').length;

            if (selectedCount > 0) {
                bulkActionsContainer.classList.remove('hidden');
                selectedCountElement.textContent = selectedCount;
            } else {
                bulkActionsContainer.classList.add('hidden');
            }
        }

        // Update select all checkbox state
        function updateSelectAllCheckbox() {
            if (!selectAllCheckbox) return;

            const allChecked = Array.from(categoryCheckboxes).every(checkbox => checkbox.checked);
            const someChecked = Array.from(categoryCheckboxes).some(checkbox => checkbox.checked);

            selectAllCheckbox.checked = allChecked;
            selectAllCheckbox.indeterminate = someChecked && !allChecked;
        }

        // Apply bulk action
        deleteSelectedBtn.addEventListener('click', function() {
            const selectedCategories = Array.from(document.querySelectorAll('.category-checkbox:checked'))
                .map(checkbox => checkbox.value);

            if (selectedCategories.length === 0) {
                alert('لم يتم اختيار أي تصنيفات');
                return;
            }

            document.getElementById('bulkDeleteCount').textContent = selectedCategories.length;
            document.getElementById('bulkDeleteCategoryIds').value = selectedCategories.join(',');
            openModal('bulkDeleteModal');
        });


        // Search functionality
        document.getElementById('search-categories')?.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            const rows = document.querySelectorAll('tbody tr[data-category-id]');

            rows.forEach(row => {
                const categoryName = row.querySelector('td:nth-child(2) div.mr-4 div:first-child').textContent.toLowerCase();
                if (categoryName.includes(searchTerm)) {
                    row.classList.remove('hidden');
                } else {
                    row.classList.add('hidden');
                }
            });
        });

        // Reset filters
        document.getElementById('resetFilters')?.addEventListener('click', function() {
            document.getElementById('search-categories').value = '';
            document.querySelectorAll('tbody tr[data-category-id]').forEach(row => {
                row.classList.remove('hidden');
            });
        });

        // Pagination functionality
        const rowsPerPageSelect = document.getElementById('rows-per-page');
        let rowsPerPage = parseInt(rowsPerPageSelect.value);
        let currentPage = 1;
        let filteredRows = Array.from(document.querySelectorAll('tbody tr[data-category-id]'));
        const totalCategories = document.getElementById('total-categories');
        const showingFrom = document.getElementById('showing-from');
        const showingTo = document.getElementById('showing-to');
        const paginationNumbers = document.getElementById('pagination-numbers');
        const prevButton = document.getElementById('prev-page');
        const nextButton = document.getElementById('next-page');
        const searchInput = document.getElementById('search-categories');

        // Filter categories function
        function filterCategories() {
            const searchTerm = searchInput.value.toLowerCase();

            filteredRows = Array.from(document.querySelectorAll('tbody tr[data-category-id]')).filter(row => {
                const name = row.querySelector('td:nth-child(2) div.mr-4 div:first-child').textContent.toLowerCase();
                return name.includes(searchTerm);
            });

            // Update total items count
            totalCategories.textContent = filteredRows.length;

            // Reset to first page when filtering
            currentPage = 1;
            updateTable();
            setupPagination();
        }

        // Update table display
        function updateTable() {
            const start = (currentPage - 1) * rowsPerPage;
            const end = start + rowsPerPage;

            // Hide all rows first
            document.querySelectorAll('tbody tr[data-category-id]').forEach(row => {
                row.style.display = 'none';
            });

            // Show only the rows for the current page
            filteredRows.slice(start, end).forEach(row => {
                row.style.display = '';
            });

            // Update showing from/to
            showingFrom.textContent = start + 1;
            showingTo.textContent = Math.min(end, filteredRows.length);
        }

        // Setup pagination
        function setupPagination() {
            const pageCount = Math.ceil(filteredRows.length / rowsPerPage);
            paginationNumbers.innerHTML = '';

            // Always show first page
            if (pageCount > 0) {
                addPageButton(1);
            }

            // Show current page and nearby pages
            const startPage = Math.max(2, currentPage - 1);
            const endPage = Math.min(pageCount - 1, currentPage + 1);

            if (startPage > 2) {
                paginationNumbers.innerHTML += '<span class="px-3 py-1">...</span>';
            }

            for (let i = startPage; i <= endPage; i++) {
                addPageButton(i);
            }

            if (endPage < pageCount - 1) {
                paginationNumbers.innerHTML += '<span class="px-3 py-1">...</span>';
            }

            // Always show last page if different from first
            if (pageCount > 1) {
                addPageButton(pageCount);
            }

            updatePaginationButtons();
        }

        function addPageButton(pageNumber) {
            const pageButton = document.createElement('button');
            pageButton.className = `pagination-btn ${pageNumber === currentPage ? 'active' : ''}`;
            pageButton.textContent = pageNumber;
            pageButton.addEventListener('click', () => {
                currentPage = pageNumber;
                updateTable();
                setupPagination();
            });
            paginationNumbers.appendChild(pageButton);
        }

        function updatePaginationButtons() {
            const pageCount = Math.ceil(filteredRows.length / rowsPerPage);

            prevButton.disabled = currentPage === 1;
            nextButton.disabled = currentPage === pageCount || pageCount === 0;

            if (prevButton.disabled) {
                prevButton.classList.add('disabled');
            } else {
                prevButton.classList.remove('disabled');
            }

            if (nextButton.disabled) {
                nextButton.classList.add('disabled');
            } else {
                nextButton.classList.remove('disabled');
            }
        }

        // Event listeners for pagination
        prevButton.addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                updateTable();
                setupPagination();
            }
        });

        nextButton.addEventListener('click', () => {
            const pageCount = Math.ceil(filteredRows.length / rowsPerPage);
            if (currentPage < pageCount) {
                currentPage++;
                updateTable();
                setupPagination();
            }
        });

        // Event listeners for search
        searchInput.addEventListener('input', filterCategories);

        // Change rows per page
        rowsPerPageSelect.addEventListener('change', function() {
            rowsPerPage = parseInt(this.value);
            currentPage = 1;
            updateTable();
            setupPagination();
        });

        // Initialize table
        filterCategories();
    });
</script>