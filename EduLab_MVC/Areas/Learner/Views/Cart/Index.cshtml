
@model EduLab_MVC.Models.DTOs.Cart.CartDto
@{
    ViewData["Title"] = "عربة التسوق - EduLab";
}

<!-- تحسينات التصميم الرئيسية -->
<style>
    :root {
        --primary-color: #4361ee;
        --primary-hover: #3a56d4;
        --secondary-color: #6c757d;
        --success-color: #198754;
        --danger-color: #dc3545;
        --warning-color: #ffc107;
        --light-bg: #f8f9fa;
        --dark-bg: #1e293b;
        --card-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
        --transition-smooth: all 0.3s ease;
    }

    .cart-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
    }
    /* إضافة هذه الأنماط إلى CSS الخاص بك */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(5px);
    }

        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }

    .modal-content {
        background: white;
        border-radius: 12px;
        width: 90%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);
    }

    .modal-header {
        padding: 20px;
        border-bottom: 1px solid #e5e7eb;
        display: flex;
        justify-content: between;
        align-items: center;
    }

        .modal-header h3 {
            margin: 0;
            font-size: 1.5rem;
            font-weight: 600;
        }

    .modal-close {
        background: none;
        border: none;
        font-size: 1.2rem;
        cursor: pointer;
        color: #6b7280;
    }

        .modal-close:hover {
            color: #374151;
        }

    .modal-body {
        padding: 20px;
    }

    .modal-footer {
        padding: 20px;
        border-top: 1px solid #e5e7eb;
        display: flex;
        gap: 12px;
        justify-content: flex-end;
    }

    .order-summary-modal {
        background: #f9fafb;
        border-radius: 8px;
        padding: 16px;
        margin-top: 16px;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 8px;
    }

    .btn {
        padding: 10px 20px;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.2s;
    }

    .btn-primary {
        background: #2563eb;
        color: white;
    }

        .btn-primary:hover {
            background: #1d4ed8;
        }

    .btn-secondary {
        background: #6b7280;
        color: white;
    }

        .btn-secondary:hover {
            background: #374151;
        }
    .cart-title {
        font-size: 2.5rem;
        font-weight: 800;
        color: var(--primary-color);
        margin-bottom: 2rem;
        text-align: center;
        position: relative;
        padding-bottom: 1rem;
    }

        .cart-title::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 100px;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-color), transparent);
            border-radius: 2px;
        }

    .cart-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 2rem;
    }

    @@media (min-width: 992px) {
        .cart-grid {
            grid-template-columns: 2fr 1fr;
        }
    }

    .cart-card {
        background: white;
        border-radius: 16px;
        box-shadow: var(--card-shadow);
        overflow: hidden;
        transition: var(--transition-smooth);
    }

    .dark .cart-card {
        background: var(--dark-bg);
    }

    .cart-header {
        background: linear-gradient(90deg, var(--primary-color), #5e72e4);
        padding: 1.25rem 1.5rem;
        color: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .cart-items-container {
        padding: 0;
    }

    .cart-item {
        display: flex;
        padding: 1.5rem;
        border-bottom: 1px solid #e2e8f0;
        transition: var(--transition-smooth);
        position: relative;
    }

    .dark .cart-item {
        border-color: #334155;
    }

    .cart-item:hover {
        background-color: #f8fafc;
    }

    .dark .cart-item:hover {
        background-color: #1a2438;
    }

    .cart-item-thumb {
        width: 100px;
        height: 100px;
        border-radius: 12px;
        object-fit: cover;
        flex-shrink: 0;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }

    .cart-item-content {
        flex-grow: 1;
        padding: 0 1.5rem;
    }

    .cart-item-title {
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #1e293b;
    }

    .dark .cart-item-title {
        color: #e2e8f0;
    }

    .cart-item-instructor {
        font-size: 0.9rem;
        color: #64748b;
        margin-bottom: 1rem;
    }

    .quantity-controls {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .quantity-btn {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f1f5f9;
        border: none;
        cursor: pointer;
        transition: var(--transition-smooth);
    }

    .dark .quantity-btn {
        background: #334155;
    }

    .quantity-btn:hover {
        background: var(--primary-color);
        color: white;
    }

    .quantity-display {
        min-width: 40px;
        text-align: center;
        font-weight: 600;
    }

    .cart-item-price {
        font-size: 1.25rem;
        font-weight: 700;
        color: var(--primary-color);
    }

    .remove-item-btn {
        position: absolute;
        top: 1rem;
        left: 1rem;
        background: #f8fafc;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--danger-color);
        border: none;
        cursor: pointer;
        transition: var(--transition-smooth);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .dark .remove-item-btn {
        background: #334155;
    }

    .remove-item-btn:hover {
        background: var(--danger-color);
        color: white;
        transform: scale(1.1);
    }

    .empty-cart {
        padding: 3rem 2rem;
        text-align: center;
    }

    .empty-cart-icon {
        font-size: 4rem;
        color: #cbd5e1;
        margin-bottom: 1.5rem;
    }

    .empty-cart-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #64748b;
        margin-bottom: 1rem;
    }

    .empty-cart-text {
        color: #94a3b8;
        margin-bottom: 2rem;
        max-width: 400px;
        margin-left: auto;
        margin-right: auto;
    }

    .shopping-btn {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        background: var(--primary-color);
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: 50px;
        text-decoration: none;
        font-weight: 600;
        transition: var(--transition-smooth);
        box-shadow: 0 4px 6px rgba(67, 97, 238, 0.3);
    }

        .shopping-btn:hover {
            background: var(--primary-hover);
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(67, 97, 238, 0.4);
        }

    .coupon-section {
        padding: 1.5rem;
        background: #f8fafc;
        border-top: 1px solid #e2e8f0;
    }

    .dark .coupon-section {
        background: #1a2438;
        border-color: #334155;
    }

    .coupon-input-group {
        display: flex;
        gap: 0.75rem;
    }

    .coupon-input {
        flex-grow: 1;
        padding: 0.75rem 1rem;
        border: 1px solid #cbd5e1;
        border-radius: 8px;
        font-size: 1rem;
        transition: var(--transition-smooth);
    }

    .dark .coupon-input {
        background: #334155;
        border-color: #475569;
        color: white;
    }

    .coupon-input:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
    }

    .coupon-btn {
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 0 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition-smooth);
    }

        .coupon-btn:hover {
            background: var(--primary-hover);
        }

    .continue-shopping {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--primary-color);
        text-decoration: none;
        font-weight: 600;
        margin-top: 1.5rem;
        transition: var(--transition-smooth);
    }

        .continue-shopping:hover {
            color: var(--primary-hover);
            gap: 0.75rem;
        }

    .order-summary {
        background: white;
        border-radius: 16px;
        box-shadow: var(--card-shadow);
        padding: 1.5rem;
        position: sticky;
        top: 2rem;
        transition: var(--transition-smooth);
    }

    .dark .order-summary {
        background: var(--dark-bg);
    }

    .summary-title {
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
        color: #1e293b;
        position: relative;
        padding-bottom: 0.75rem;
    }

    .dark .summary-title {
        color: #e2e8f0;
    }

    .summary-title::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 40px;
        height: 3px;
        background: var(--primary-color);
        border-radius: 2px;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        padding: 0.75rem 0;
        border-bottom: 1px dashed #cbd5e1;
    }

    .dark .summary-row {
        border-color: #334155;
    }

    .summary-total {
        display: flex;
        justify-content: space-between;
        padding: 1rem 0;
        font-weight: 700;
        font-size: 1.25rem;
        color: #1e293b;
    }

    .dark .summary-total {
        color: #e2e8f0;
    }

    .checkout-btn {
        display: block;
        width: 100%;
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 1rem;
        border-radius: 12px;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition-smooth);
        margin-top: 1.5rem;
        box-shadow: 0 4px 6px rgba(67, 97, 238, 0.3);
        text-align: center;
        text-decoration: none;
    }

        .checkout-btn:hover {
            background: var(--primary-hover);
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(67, 97, 238, 0.4);
        }

    .payment-methods {
        text-align: center;
        margin-top: 1.5rem;
        padding-top: 1.5rem;
        border-top: 1px dashed #cbd5e1;
    }

    .dark .payment-methods {
        border-color: #334155;
    }

    .payment-text {
        color: #64748b;
        margin-bottom: 1rem;
        font-size: 0.9rem;
    }

    .payment-icons {
        display: flex;
        justify-content: center;
        gap: 0.75rem;
    }

    .payment-icon {
        width: 40px;
        height: 40px;
        border-radius: 8px;
        background: #f1f5f9;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #64748b;
        font-size: 1.25rem;
        transition: var(--transition-smooth);
        cursor: pointer;
    }

    .dark .payment-icon {
        background: #334155;
    }

    .payment-icon:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .clear-cart-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        width: 100%;
        background: #f8fafc;
        color: var(--danger-color);
        border: 1px solid #f1f5f9;
        padding: 0.75rem;
        border-radius: 12px;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition-smooth);
        margin-top: 1rem;
    }

    .dark .clear-cart-btn {
        background: #1a2438;
        border-color: #334155;
    }

    .clear-cart-btn:hover {
        background: var(--danger-color);
        color: white;
    }

    /* تحسينات المودال والتوست */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.6);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        padding: 1rem;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
    }

        .modal-overlay.active {
            opacity: 1;
            visibility: visible;
        }

    .modal-container {
        background: white;
        border-radius: 16px;
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        max-width: 400px;
        width: 100%;
        overflow: hidden;
        transform: translateY(20px);
        transition: transform 0.3s ease;
    }

    .dark .modal-container {
        background: var(--dark-bg);
    }

    .modal-overlay.active .modal-container {
        transform: translateY(0);
    }

    .modal-icon {
        display: flex;
        justify-content: center;
        padding: 2rem 2rem 1rem;
    }

    .modal-icon-inner {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: #fee2e2;
        color: var(--danger-color);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
    }

    .modal-content {
        padding: 0 2rem 1.5rem;
        text-align: center;
    }

    .modal-title {
        font-size: 1.25rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        color: #1e293b;
    }

    .dark .modal-title {
        color: #e2e8f0;
    }

    .modal-text {
        color: #64748b;
        margin-bottom: 2rem;
        line-height: 1.5;
    }

    .modal-actions {
        display: flex;
        gap: 0.75rem;
        justify-content: center;
    }

    .modal-btn {
        padding: 0.5rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition-smooth);
    }

    .modal-btn-cancel {
        background: #f1f5f9;
        color: #64748b;
        border: none;
    }

    .dark .modal-btn-cancel {
        background: #334155;
        color: #e2e8f0;
    }

    .modal-btn-cancel:hover {
        background: #e2e8f0;
    }

    .dark .modal-btn-cancel:hover {
        background: #475569;
    }

    .modal-btn-confirm {
        background: var(--danger-color);
        color: white;
        border: none;
    }

        .modal-btn-confirm:hover {
            background: #b91c1c;
        }

    .toast-notification {
        position: fixed;
        top: 1.5rem;
        right: 1.5rem;
        background: white;
        border-radius: 12px;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        max-width: 350px;
        z-index: 1000;
        transform: translateX(100%);
        opacity: 0;
        transition: all 0.3s ease;
        border-left: 4px solid;
    }

    .dark .toast-notification {
        background: var(--dark-bg);
    }

    .toast-notification.show {
        transform: translateX(0);
        opacity: 1;
    }

    .toast-success {
        border-left-color: var(--success-color);
    }

    .toast-error {
        border-left-color: var(--danger-color);
    }

    .toast-warning {
        border-left-color: var(--warning-color);
    }

    .toast-icon {
        font-size: 1.25rem;
    }

    .toast-success .toast-icon {
        color: var(--success-color);
    }

    .toast-error .toast-icon {
        color: var(--danger-color);
    }

    .toast-warning .toast-icon {
        color: var(--warning-color);
    }

    .toast-content {
        flex-grow: 1;
    }

    .toast-message {
        font-weight: 500;
        color: #1e293b;
        margin-bottom: 0.25rem;
    }

    .dark .toast-message {
        color: #e2e8f0;
    }

    .toast-close {
        background: none;
        border: none;
        color: #94a3b8;
        cursor: pointer;
        font-size: 1.1rem;
        transition: var(--transition-smooth);
    }

        .toast-close:hover {
            color: #64748b;
        }

    /* تأثيرات للعناصر عند التحميل */
    .loading {
        opacity: 0.7;
        pointer-events: none;
    }

    .pulse {
        animation: pulse 1.5s infinite;
    }

    @@keyframes pulse {
        0% {
            opacity: 1;
        }

        50% {
            opacity: 0.5;
        }

        100% {
            opacity: 1;
        }
    }

    /* تحسينات للعربة الفارغة */
    .empty-cart-enhanced {
        padding: 4rem 2rem;
        text-align: center;
        background: white;
        border-radius: 16px;
        box-shadow: var(--card-shadow);
    }

    .dark .empty-cart-enhanced {
        background: var(--dark-bg);
    }

    .empty-cart-icon-enhanced {
        font-size: 5rem;
        color: #cbd5e1;
        margin-bottom: 1.5rem;
        animation: bounce 2s infinite;
    }

    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100% {
            transform: translateY(0);
        }

        40% {
            transform: translateY(-20px);
        }

        60% {
            transform: translateY(-10px);
        }
    }

    .empty-cart-title-enhanced {
        font-size: 1.75rem;
        font-weight: 700;
        color: #64748b;
        margin-bottom: 1rem;
    }

    .empty-cart-text-enhanced {
        color: #94a3b8;
        margin-bottom: 2.5rem;
        max-width: 400px;
        margin-left: auto;
        margin-right: auto;
        line-height: 1.6;
    }

    /* تحسينات للعناوين والألوان في الوضع الداكن */
    .dark .cart-item-title,
    .dark .summary-title,
    .dark .modal-title,
    .dark .toast-message {
        color: #e2e8f0;
    }

    .dark .cart-item-instructor,
    .dark .payment-text,
    .dark .modal-text {
        color: #94a3b8;
    }

    .cart-grid.empty-cart-mode {
        display: flex;
        justify-content: center;
        align-items: flex-start;
    }

    .empty-cart-full-width {
        width: 100%;
        max-width: 600px;
        margin: 0 auto;
    }

    /* تعديلات للعرض على الشاشات الكبيرة */
    @@media (min-width: 992px) {
        .cart-grid:not(.empty-cart-mode) {
            grid-template-columns: 2fr 1fr;
        }

        .cart-grid.empty-cart-mode {
            display: grid;
            grid-template-columns: 1fr;
            justify-items: center;
        }
    }
</style>

<div class="cart-container">
    <h1 class="cart-title">عربة التسوق</h1>

    <div class="cart-grid @(!Model.Items.Any() ? "empty-cart-mode" : "")">
        @if (Model.Items.Any())
        {
            <!-- العناصر الرئيسية في العربة -->
            <div>
                <div class="cart-card">
                    <div class="cart-header">
                        <h2 class="text-lg font-semibold">الدورات المضافة</h2>
                        <span class="text-sm bg-white bg-opacity-20 px-2 py-1 rounded-full" id="cart-items-count">
                            @Model.TotalItems عناصر
                        </span>
                    </div>

                    <div class="cart-items-container" id="cart-items-container">
                        @foreach (var item in Model.Items)
                        {
                            <div class="cart-item" id="cart-item-@item.Id">
                                <button onclick="removeItem(@item.Id)" class="remove-item-btn" title="إزالة من العربة">
                                    <i class="fas fa-trash-alt"></i>
                                </button>

                                <img src="@item.ThumbnailUrl" alt="@item.CourseTitle" class="cart-item-thumb">

                                <div class="cart-item-content">
                                    <h3 class="cart-item-title">@item.CourseTitle</h3>
                                    <p class="cart-item-instructor">مع المدرب: @item.InstructorName</p>

                                    <div class="flex justify-between items-center">
                                        <div class="quantity-controls">
                                            <button onclick="decreaseQuantity(@item.Id)" class="quantity-btn">
                                                <i class="fas fa-minus dark:text-white"></i>
                                            </button>
                                            <span class="quantity-display dark:text-white" id="quantity-@item.Id">@item.Quantity</span>
                                            <button onclick="increaseQuantity(@item.Id)" class="quantity-btn">
                                                <i class="fas fa-plus dark:text-white"></i>
                                            </button>
                                        </div>

                                        <span class="cart-item-price" id="price-@item.Id">
                                            @item.TotalPrice.ToString("N0") ج.م
                                        </span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- قسم كوبون الخصم -->
                    <div class="coupon-section">
                        <div class="coupon-input-group">
                            <input type="text" placeholder="أدخل كود الخصم" id="coupon-code" class="coupon-input">
                            <button class="coupon-btn">تطبيق</button>
                        </div>
                    </div>
                </div>

                <a asp-area="Learner" asp-controller="Course" asp-action="Index" class="continue-shopping">
                    <i class="fas fa-arrow-right"></i>
                    الاستمرار في التسوق
                </a>
            </div>

            <!-- ملخص الطلب -->
            <div>
                <div class="order-summary">
                    <h2 class="summary-title">ملخص الطلب</h2>

                    <div class="space-y-2">
                        <div class="summary-row">
                            <span class="dark:text-white">المجموع الفرعي</span>
                            <span id="subtotal-price" class="dark:text-white">
                                @Model.TotalPrice.ToString("N0") ج.م
                            </span>
                        </div>

                        <div class="summary-row">
                            <span class="dark:text-white">الخصم</span>
                            <span class="text-green-600 dark:text-green-400" id="discount-amount">-0 ج.م</span>
                        </div>

                        <div class="summary-total">
                            <span>المجموع الكلي</span>
                            <span id="total-price">@Model.TotalPrice.ToString("N0") ج.م</span>
                        </div>
                    </div>

                    <!-- استبدال الزر الحالي بهذا -->
                    <a href="#" onclick="handleCheckout(event)" class="checkout-btn">
                        إتمام الشراء
                    </a>

                    <div class="payment-methods">
                        <p class="payment-text">أو استخدم</p>
                        <div class="payment-icons">
                            <div class="payment-icon">
                                <i class="fab fa-cc-paypal"></i>
                            </div>
                            <div class="payment-icon">
                                <i class="fab fa-cc-visa"></i>
                            </div>
                            <div class="payment-icon">
                                <i class="fab fa-cc-mastercard"></i>
                            </div>
                        </div>
                    </div>
                </div>

                <button onclick="showClearCartModal()" class="clear-cart-btn">
                    <i class="fas fa-trash-alt"></i>
                    تفريغ السلة
                </button>
            </div>
        }
        else
        {
            <!-- حالة العربة الفارغة (موسعة وعرض كامل في المنتصف) -->
            <div class="empty-cart-full-width">
                <div class="cart-card">
                    <div class="cart-header">
                        <h2 class="text-lg font-semibold">الدورات المضافة</h2>
                        <span class="text-sm bg-white bg-opacity-20 px-2 py-1 rounded-full" id="cart-items-count">
                            0 عناصر
                        </span>
                    </div>

                    <div class="empty-cart-enhanced">
                        <div class="empty-cart-icon-enhanced">
                            <i class="fas fa-shopping-cart"></i>
                        </div>
                        <h3 class="empty-cart-title-enhanced">عربة التسوق فارغة</h3>
                        <p class="empty-cart-text-enhanced">
                            لم تقم بإضافة أي دورات إلى عربة التسوق بعد. ابدأ رحلتك التعليمية الآن!
                        </p>
                        <a asp-area="Learner" asp-controller="Course" asp-action="Index" class="shopping-btn">
                            <i class="fas fa-shopping-bag"></i>
                            ابدأ بالتسوق الآن
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- إضافة هذا قبل نهاية div.cart-container -->
<div id="checkout-modal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>تأكيد عملية الشراء</h3>
            <button onclick="hideCheckoutModal()" class="modal-close">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <p>هل أنت متأكد من أنك تريد إتمام عملية الشراء؟</p>
            <div class="order-summary-modal">
                <div class="summary-row">
                    <span>عدد الدورات:</span>
                    <span id="modal-courses-count">@Model.Items.Count</span>
                </div>
                <div class="summary-row">
                    <span>المجموع الكلي:</span>
                    <span id="modal-total-price">@Model.TotalPrice.ToString("N0") ج.م</span>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button onclick="hideCheckoutModal()" class="btn btn-secondary">إلغاء</button>
            <button onclick="proceedToCheckout()" class="btn btn-primary">متابعة إلى الدفع</button>
        </div>
    </div>
</div>
<!-- مودال تأكيد تفريغ السلة -->
<div id="clear-cart-modal" class="modal-overlay">
    <div class="modal-container">
        <div class="modal-icon">
            <div class="modal-icon-inner">
                <i class="fas fa-exclamation-triangle"></i>
            </div>
        </div>
        <div class="modal-content">
            <h3 class="modal-title">تفريغ السلة</h3>
            <p class="modal-text">هل أنت متأكد من أنك تريد تفريغ سلة التسوق؟ سيتم حذف جميع العناصر ولا يمكن التراجع عن هذا الإجراء.</p>
            <div class="modal-actions">
                <button onclick="hideClearCartModal()" class="modal-btn modal-btn-cancel">إلغاء</button>
                <button onclick="clearCartConfirmed()" class="modal-btn modal-btn-confirm">تأكيد</button>
            </div>
        </div>
    </div>
</div>

<!-- إشعار التوست -->
<div id="toast" class="toast-notification">
    <div class="toast-icon">
        <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
        <p class="toast-message" id="toast-message"></p>
    </div>
    <button onclick="hideToast()" class="toast-close">
        <i class="fas fa-times"></i>
    </button>
</div>

<script>
    // حالة التحميل لمنع الطلبات المتعددة في نفس الوقت
    let isLoading = false;

    // تهيئة واجهة المستخدم للعربة
    document.addEventListener('DOMContentLoaded', function() {
        initializeCartUI();
        setupEventListeners();
    });

    // تهيئة واجهة المستخدم للعربة
    function initializeCartUI() {
        // تخزين الكميات الأصلية للاستعادة عند الخطأ
        document.querySelectorAll('[id^="quantity-"]').forEach(element => {
            element.dataset.original = element.textContent;
        });

        // إضافة تأثيرات عند التمرير
        setupScrollEffects();
    }

    // إعداد مستمعي الأحداث
    function setupEventListeners() {
        // إضافة مستمع للأخطاء
        window.addEventListener('error', function(e) {
            console.error('JavaScript Error:', e.error);
            showToast('حدث خطأ غير متوقع', 'error');
        });

        // إضافة مستمع للشبكة
        window.addEventListener('online', function() {
            showSuccess('تم استعادة الاتصال بالإنترنت', 'success');
        });

        window.addEventListener('offline', function() {
            showError('فقدان الاتصال بالإنترنت', 'warning');
        });
    }

    // إعداد تأثيرات التمرير
    function setupScrollEffects() {
        const cartItems = document.querySelectorAll('.cart-item');
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.opacity = "1";
                    entry.target.style.transform = "translateY(0)";
                }
            });
        }, { threshold: 0.1 });

        cartItems.forEach(item => {
            item.style.opacity = "0";
            item.style.transform = "translateY(20px)";
            item.style.transition = "opacity 0.5s ease, transform 0.5s ease";
            observer.observe(item);
        });
    }

    // عرض/إخفاء مودال تفريغ السلة
    function showClearCartModal() {
        const modal = document.getElementById('clear-cart-modal');
        if (modal) {
            modal.classList.add('active');
            document.body.style.overflow = 'hidden';
        }
    }

    function hideClearCartModal() {
        const modal = document.getElementById('clear-cart-modal');
        if (modal) {
            modal.classList.remove('active');
            document.body.style.overflow = 'auto';
        }
    }

    // زيادة الكمية
    function increaseQuantity(cartItemId) {
        const quantityElement = document.getElementById(`quantity-${cartItemId}`);
        if (!quantityElement) return;

        const currentQuantity = parseInt(quantityElement.textContent) || 1;
        updateQuantity(cartItemId, currentQuantity + 1);
    }

    // تقليل الكمية
    function decreaseQuantity(cartItemId) {
        const quantityElement = document.getElementById(`quantity-${cartItemId}`);
        if (!quantityElement) return;

        const currentQuantity = parseInt(quantityElement.textContent) || 1;

        if (currentQuantity > 1) {
            updateQuantity(cartItemId, currentQuantity - 1);
        } else {
            showError('لا يمكن أن تكون الكمية أقل من 1', 'error');
        }
    }

    // تحديث الكمية - التعديل الرئيسي هنا
    async function updateQuantity(cartItemId, newQuantity) {
        if (isLoading || newQuantity < 1) return;

        isLoading = true;
        const quantityElement = document.getElementById(`quantity-${cartItemId}`);
        const priceElement = document.getElementById(`price-${cartItemId}`);
        const itemElement = document.getElementById(`cart-item-${cartItemId}`);

        if (!quantityElement || !priceElement || !itemElement) {
            isLoading = false;
            return;
        }

        const originalQuantity = quantityElement.textContent;
        const originalPrice = priceElement.textContent;

        // تحديث واجهة المستخدم فوراً (بدون انتظار الاستجابة)
        quantityElement.textContent = newQuantity;

        // إضافة تأثير التحميل
        priceElement.textContent = '...';
        itemElement.classList.add('loading');

        try {
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

            const response = await fetch(`/Learner/Cart/UpdateItem?cartItemId=${cartItemId}&quantity=${newQuantity}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': token,
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    const updatedItem = result.items.find(item => item.id === cartItemId);

                    if (updatedItem) {
                        // تحديث السعر مع تأثير
                        animateValue(priceElement, parseFloat(originalPrice.replace(/[^0-9.]/g, '') || 0), updatedItem.totalPrice, 500, true);

                        // حفظ القيم الجديدة
                        quantityElement.dataset.original = updatedItem.quantity;
                        priceElement.dataset.original = updatedItem.totalPrice;
                    }

                    updateCartUI(result);

                    // عرض رسالة حسب التغيير
                    if (newQuantity > parseInt(originalQuantity)) {
                        showSuccess('تم زيادة الكمية بنجاح');
                    } else {
                        showSuccess('تم تقليل الكمية بنجاح');
                    }
                } else {
                    showError(result.message || 'حدث خطأ أثناء تحديث الكمية', 'error');
                    // استعادة القيم الأصلية في حالة الخطأ
                    quantityElement.textContent = originalQuantity;
                    priceElement.textContent = originalPrice;
                }
            } else {
                showError('حدث خطأ أثناء تحديث الكمية', 'error');
                // استعادة القيم الأصلية في حالة الخطأ
                quantityElement.textContent = originalQuantity;
                priceElement.textContent = originalPrice;
            }
        } catch (error) {
            console.error('Error:', error);
            showError('حدث خطأ في الاتصال', 'error');
            // استعادة القيم الأصلية في حالة الخطأ
            quantityElement.textContent = originalQuantity;
            priceElement.textContent = originalPrice;
        } finally {
            isLoading = false;
            itemElement.classList.remove('loading');
        }
    }

    // إزالة عنصر من العربة
    async function removeItem(cartItemId) {
        if (isLoading) return;

        isLoading = true;
        const itemElement = document.getElementById(`cart-item-${cartItemId}`);

        if (!itemElement) {
            isLoading = false;
            return;
        }

        // إضافة تأثير الإزالة
        itemElement.style.transition = 'all 0.3s ease';
        itemElement.style.transform = 'translateX(100%)';
        itemElement.style.opacity = '0';

        try {
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

            const response = await fetch(`/Learner/Cart/RemoveItem?cartItemId=${cartItemId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': token,
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    // انتظار انتهاء animation الإزالة قبل الحذف الفعلي
                    setTimeout(() => {
                        itemElement.remove();
                        updateCartUI(result);
                        showSuccess('تم إزالة المنتج من السلة بنجاح');

                        // إذا كانت العربة فارغة، إعادة تحميل الصفحة
                        if (result.totalItems === 0) {
                            setTimeout(() => location.reload(), 1000);
                        }
                    }, 300);
                } else {
                    showError(result.message || 'حدث خطأ أثناء إزالة المنتج', 'error');
                    itemElement.style.transform = 'translateX(0)';
                    itemElement.style.opacity = '1';
                }
            } else {
                showError('حدث خطأ أثناء إزالة المنتج', 'error');
                itemElement.style.transform = 'translateX(0)';
                itemElement.style.opacity = '1';
            }
        } catch (error) {
            console.error('Error:', error);
            showError('حدث خطأ في الاتصال', 'error');
            itemElement.style.transform = 'translateX(0)';
            itemElement.style.opacity = '1';
        } finally {
            isLoading = false;
        }
    }

    // تفريغ العربة بعد التأكيد
    async function clearCartConfirmed() {
        if (isLoading) return;

        isLoading = true;
        hideClearCartModal();

        // إضافة تأثير التحميل على كل العناصر
        const cartItems = document.querySelectorAll('.cart-item');
        cartItems.forEach(item => {
            item.classList.add('loading', 'pulse');
        });

        try {
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

            const response = await fetch('/Learner/Cart/ClearCart', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': token,
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    showSuccess('تم تفريغ السلة بنجاح');

                    // تأثير إخفاء جميع العناصر
                    cartItems.forEach((item, index) => {
                        setTimeout(() => {
                            item.style.transition = 'all 0.3s ease';
                            item.style.transform = 'translateX(100%)';
                            item.style.opacity = '0';
                        }, index * 100);
                    });

                    setTimeout(() => location.reload(), 1000);
                } else {
                    showError(result.message || 'حدث خطأ أثناء تفريغ السلة', 'error');
                    cartItems.forEach(item => {
                        item.classList.remove('loading', 'pulse');
                    });
                }
            } else {
                showError('حدث خطأ أثناء تفريغ السلة', 'error');
                cartItems.forEach(item => {
                    item.classList.remove('loading', 'pulse');
                });
            }
        } catch (error) {
            console.error('Error:', error);
            showError('حدث خطأ في الاتصال', 'error');
            cartItems.forEach(item => {
                item.classList.remove('loading', 'pulse');
            });
        } finally {
            isLoading = false;
        }
    }
        // إضافة هذه الدالة إلى script
    async function handleCheckout(event) {
        event.preventDefault();

        // التحقق من صحة العربة
        const isValid = await validateCartBeforeCheckout();
        if (!isValid) return;

        // التحقق من توفر المنتجات
        const isAvailable = await checkProductsAvailability();
        if (!isAvailable) return;

        // عرض modal التأكيد
        showCheckoutModal();
    }
        // إضافة هذه الدوال لتحسين تجربة المستخدم
    function setupCheckoutShortcut() {
        // إضافة shortcut للدفع (Ctrl + Enter)
        document.addEventListener('keydown', function(e) {
            if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                const checkoutBtn = document.querySelector('.checkout-btn');
                if (checkoutBtn && checkoutBtn.offsetParent !== null) {
                    handleCheckout(new Event('click'));
                }
            }
        });
    }

    // إضافة تحليل للأحداث
    function trackCheckoutEvent() {
        if (typeof gtag !== 'undefined') {
            gtag('event', 'begin_checkout', {
                'currency': 'EGP',
                'value': @Model.TotalPrice,
                'items': [
                @foreach (var item in Model.Items)
                {
                        <text>
                        {
                            'item_id': '@item.CourseId',
                            'item_name': '@item.CourseTitle',
                            'price': @item.CoursePrice,
                            'quantity': @item.Quantity
                        },
                        </text>
                }
                ]
            });
        }
    }

    // استدعاء الدوال عند التحميل
    document.addEventListener('DOMContentLoaded', function() {
        setupCheckoutShortcut();

        // تتبع عندما يعرض المستخدم صفحة السلة
        if (typeof gtag !== 'undefined') {
            gtag('event', 'view_cart', {
                'currency': 'EGP',
                'value': @Model.TotalPrice,
                'items': [
                @foreach (var item in Model.Items)
                {
                        <text>
                        {
                            'item_id': '@item.CourseId',
                            'item_name': '@item.CourseTitle',
                            'price': @item.CoursePrice,
                            'quantity': @item.Quantity
                        },
                        </text>
                }
                ]
            });
        }
    });
    // تحديث واجهة المستخدم للعربة
    function updateCartUI(cart) {
        if (!cart) return;

        // تحديث عدد العناصر
        const countElement = document.getElementById('cart-items-count');
        if (countElement) {
            countElement.textContent = `${cart.totalItems} عناصر`;
        }

        // تحديث الأسعار مع تأثير
        const subtotalElement = document.getElementById('subtotal-price');
        const totalElement = document.getElementById('total-price');

        if (subtotalElement && totalElement) {
            const currentSubtotal = parseFloat(subtotalElement.dataset.current || cart.totalPrice);
            const currentTotal = parseFloat(totalElement.dataset.current || cart.totalPrice);

            animateValue(subtotalElement, currentSubtotal, cart.totalPrice, 500, true);
            animateValue(totalElement, currentTotal, cart.totalPrice, 500, true);

            subtotalElement.dataset.current = cart.totalPrice;
            totalElement.dataset.current = cart.totalPrice;
        }

        // تحديث عدد العناصر في الهيدر (إذا كان موجودًا)
        const headerCartCount = document.querySelector('[data-cart-count]');
        if (headerCartCount) {
            headerCartCount.textContent = cart.totalItems;
        }
    }

    // دالة لتحريك القيم برسوميات (للأسعار والكميات)
    function animateValue(element, start, end, duration, isPrice = false) {
        if (!element) return;

        const startTimestamp = performance.now();
        const step = (timestamp) => {
            const progress = Math.min((timestamp - startTimestamp) / duration, 1);
            const value = progress * (end - start) + start;

            if (isPrice) {
                element.textContent = `${Math.floor(value).toLocaleString()} ج.م`;
            } else {
                element.textContent = Math.floor(value);
            }

            if (progress < 1) {
                window.requestAnimationFrame(step);
            }
        };
        window.requestAnimationFrame(step);
    }

    // دالة مساعدة للتحقق من صحة العناصر قبل التعديل
    function validateElementExists(elementId, action) {
        const element = document.getElementById(elementId);
        if (!element) {
            console.error(`Element not found: ${elementId} for action: ${action}`);
            return false;
        }
        return true;
    }

    // معالجة الأخطاء العالمية
    window.onerror = function(message, source, lineno, colno, error) {
        console.error('Global error:', message, source, lineno, colno, error);
        showError('حدث خطأ غير متوقع في الصفحة', 'error');
        return true;
    };

    // معالجة الوعود غير المعالجة
    window.addEventListener('unhandledrejection', function(event) {
        console.error('Unhandled promise rejection:', event.reason);
        showError('حدث خطأ في النظام', 'error');
    });

    // وظائف عرض الرسائل
    function showToast(message, type = 'success') {
        const toast = document.getElementById('toast');
        const toastMessage = document.getElementById('toast-message');

        if (!toast || !toastMessage) return;

        toast.className = `toast-notification toast-${type}`;
        toastMessage.textContent = message;
        toast.classList.add('show');

        setTimeout(() => {
            toast.classList.remove('show');
        }, 3000);
    }

    function showSuccess(message) {
        showToast(message, 'success');
    }

    function showError(message) {
        showToast(message, 'error');
    }
        function showCheckoutModal() {
        const modal = document.getElementById('checkout-modal');
        if (modal) {
            modal.classList.add('active');
            document.body.style.overflow = 'hidden';
        }
    }

    function hideCheckoutModal() {
        const modal = document.getElementById('checkout-modal');
        if (modal) {
            modal.classList.remove('active');
            document.body.style.overflow = 'auto';
        }
    }

    // المتابعة إلى صفحة الدفع
    function proceedToCheckout() {
        hideCheckoutModal();
        window.location.href = '@Url.Action("Checkout", "Payment", new { area = "Learner" })';
    }

    // التحقق من صحة العربة قبل الدفع
    async function validateCartBeforeCheckout() {
        try {
            const response = await fetch('@Url.Action("GetCartSummary", "Cart")');
            const result = await response.json();

            if (result.totalItems === 0) {
                showError('عربة التسوق فارغة. أضف دورات قبل المتابعة إلى الدفع', 'error');
                return false;
            }

            return true;
        } catch (error) {
            console.error('Error validating cart:', error);
            return true; // المتابعة رغم الخطأ لتجنع منع المستخدم
        }
    }

    // تحديث زر إتمام الشراء لإضافة التأكيد
    document.addEventListener('DOMContentLoaded', function() {
        const checkoutBtn = document.querySelector('.checkout-btn');
        if (checkoutBtn) {
            checkoutBtn.addEventListener('click', async function(e) {
                e.preventDefault();

                const isValid = await validateCartBeforeCheckout();
                if (isValid) {
                    showCheckoutModal();
                }
            });
        }
    });

    // إضافة تأثير تحميل عند النقر على زر الدفع
    function setCheckoutLoading(isLoading) {
        const checkoutBtn = document.querySelector('.checkout-btn');
        if (checkoutBtn) {
            if (isLoading) {
                checkoutBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> جاري التحميل...';
                checkoutBtn.disabled = true;
            } else {
                checkoutBtn.innerHTML = 'إتمام الشراء';
                checkoutBtn.disabled = false;
            }
        }
    }

    // التحقق من توفر المنتجات قبل الدفع
    async function checkProductsAvailability() {
        try {
            setCheckoutLoading(true);

            const response = await fetch('@Url.Action("CheckAvailability", "Cart")');
            const result = await response.json();

            if (result.success) {
                if (result.outOfStockItems && result.outOfStockItems.length > 0) {
                    showError(`بعض المنتجات غير متوفرة: ${result.outOfStockItems.join(', ')}`, 'error');
                    return false;
                }
                return true;
            } else {
                showError('حدث خطأ أثناء التحقق من توفر المنتجات', 'error');
                return false;
            }
        } catch (error) {
            console.error('Error checking availability:', error);
            return true; // المتابعة رغم الخطأ
        } finally {
            setCheckoutLoading(false);
        }
    }
</script>