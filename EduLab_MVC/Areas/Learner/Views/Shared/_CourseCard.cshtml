@using EduLab_MVC.Services.ServiceInterfaces
@model EduLab_MVC.Models.DTOs.Course.CourseDTO
@inject IEnrollmentService EnrollmentService
@inject ICartService CartService
@inject IWishlistService WishlistService

@functions {
    public string GetArabicMonthName(string englishMonth)
    {
        var months = new Dictionary<string, string>
        {
            {"January", "يناير"}, {"February", "فبراير"}, {"March", "مارس"},
            {"April", "أبريل"}, {"May", "مايو"}, {"June", "يونيو"},
            {"July", "يوليو"}, {"August", "أغسطس"}, {"September", "سبتمبر"},
            {"October", "أكتوبر"}, {"November", "نوفمبر"}, {"December", "ديسمبر"}
        };
        return months.TryGetValue(englishMonth, out var arabicMonth) ? arabicMonth : englishMonth;
    }

    public string FormatDuration(int seconds)
    {
        var hours = Math.Floor(seconds / 3600.0);
        var minutes = Math.Floor((seconds % 3600) / 60.0);
        var secs = seconds % 60;
        return $"{hours:00}:{minutes:00}:{secs:00}";
    }
}

@{
    var currentArea = ViewContext.RouteData.Values["Area"]?.ToString();
    var currentController = ViewContext.RouteData.Values["Controller"]?.ToString();
    var currentAction = ViewContext.RouteData.Values["Action"]?.ToString();

    // التحقق من تسجيل المستخدم في الدورة
    bool isUserEnrolled = false;
    // التحقق من وجود الكورس في السلة
    bool isCourseInCart = false;
    // التحقق من وجود الكورس في المفضلة
    bool isCourseInWishlist = false;

    if (User.Identity.IsAuthenticated)
    {
        isUserEnrolled = await EnrollmentService.IsUserEnrolledInCourseAsync(Model.Id);
        isCourseInCart = await CartService.IsCourseInCartAsync(Model.Id);
        isCourseInWishlist = await WishlistService.IsCourseInWishlistAsync(Model.Id);
    }
}



<style>
    .swiper-container.grid-mode {
        overflow: visible !important;
    }
    /* ألوان للحالات المختلفة */
    .bg-orange-500 {
        background-color: #f97316;
    }

        .bg-orange-500:hover {
            background-color: #ea580c;
        }

    .bg-green-600 {
        background-color: #16a34a;
    }

        .bg-green-600:hover {
            background-color: #15803d;
        }
        .swiper-container.grid-mode .swiper-wrapper {
            display: grid !important;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)) !important;
            gap: 1.5rem !important;
            transform: none !important;
            padding: 1rem 0 !important;
        }

        .swiper-container.grid-mode .swiper-slide {
            width: 100% !important;
            height: auto !important;
            margin: 0 !important;
        }

        /* إخفاء أزرار التنقل في وضع الشبكة */
        .swiper-container.grid-mode ~ .swiper-button-prev,
        .swiper-container.grid-mode ~ .swiper-button-next {
            display: none !important;
        }

    /* تحسينات للعرض على الشاشات الصغيرة */
    @@media (max-width: 1024px) {
        .swiper-container.grid-mode .swiper-wrapper {
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)) !important;
        }
    }

    @@media (max-width: 640px) {
        .swiper-container.grid-mode .swiper-wrapper {
            grid-template-columns: 1fr !important;
        }
    }
    /* الحفاظ على الـ Animations الحالية */
    .category-header {
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
        position: relative;
        overflow: hidden;
        animation: fadeInDown 0.8s ease-out;
    }

    /* معالجة خاصة لعناصر التلميح (Hover) */
    .course-hover-info {
        overflow: hidden;
    }

    body, html {
        overflow-x: hidden;
        width: 100%;
    }

    /* إذا كان Swiper هو المشكلة */
    .swiper-container {
        overflow: hidden;
    }

    .category-header::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        right: -50%;
        bottom: -50%;
        background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 20%, rgba(255,255,255,0) 80%, rgba(255,255,255,0.1) 100%);
        animation: gradientMove 8s ease infinite;
        z-index: 1;
    }

    @@keyframes gradientMove {
        0% {
            transform: translateX(-50%) translateY(-50%) rotate(0deg);
        }

        100% {
            transform: translateX(50%) translateY(50%) rotate(360deg);
        }
    }

    @@keyframes fadeInDown {
        0% {
            opacity: 0;
            transform: translateY(-20px);
        }

        100% {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* تأثيرات الـ Hover الحالية */
    .course-hover-info {
        position: absolute;
        top: -10px;
        width: 320px;
        min-height: 100%;
        background: white;
        border-radius: 0.75rem;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        padding: 1.25rem;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        z-index: 50;
        border: 1px solid #e5e7eb;
        display: flex;
        flex-direction: column;
    }

    .dark .course-hover-info {
        background: #1f2937;
        border-color: #374151;
    }

    .course-hover-info::before {
        content: '';
        position: absolute;
        width: 0;
        height: 0;
        border-style: solid;
        z-index: 51;
        top: 34px;
    }

    .course-hover-info.force-left {
        left: -20px;
        right: auto;
        transform: translateX(-100%);
    }

        .course-hover-info.force-left::before {
            right: -8px;
            left: auto;
            border-width: 8px 0 8px 8px;
            border-color: transparent #fff transparent transparent;
        }

    .dark .course-hover-info.force-left::before {
        border-color: transparent #1f2937 transparent transparent;
    }

    .course-hover-info.force-right {
        left: auto;
        right: -20px;
        transform: translateX(100%);
    }

        .course-hover-info.force-right::before {
            right: auto;
            left: -8px;
            border-width: 8px 8px 8px 0;
            border-color: transparent #fff transparent transparent;
        }

    .dark .course-hover-info.force-right::before {
        border-color: transparent #1f2937 transparent transparent;
    }
        @@keyframes cartPulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.3); }
        100% { transform: scale(1); }
    }

    .cart-pulse {
        animation: cartPulse 0.4s ease-in-out;
    }
    .group:hover .course-hover-info {
        opacity: 1;
        visibility: visible;
    }

    .swiper-slide {
        margin-right: 16px !important;
        position: relative;
        z-index: 1;
        transition: z-index 0.3s ease;
        width: auto !important;
    }

        .swiper-slide:hover {
            z-index: 100;
        }

    /* تحسينات لأزرار الإضافة إلى السلة */
    .add-to-cart-btn {
        position: relative;
        overflow: hidden;
    }

        .add-to-cart-btn.loading {
            cursor: not-allowed;
        }

        .add-to-cart-btn .btn-text {
            transition: opacity 0.3s ease;
        }

        .add-to-cart-btn.loading .btn-text {
            opacity: 0;
        }

        .add-to-cart-btn .loading-spinner {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .add-to-cart-btn.loading .loading-spinner {
            opacity: 1;
        }
    /* إضافة styles لزر المفضلة */
    .wishlist-btn {
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
    }

        .wishlist-btn.loading {
            cursor: not-allowed;
            opacity: 0.7;
        }

        .wishlist-btn .btn-text {
            transition: opacity 0.3s ease;
        }

        .wishlist-btn.loading .btn-text {
            opacity: 0;
        }

        .wishlist-btn .loading-spinner {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .wishlist-btn.loading .loading-spinner {
            opacity: 1;
        }

        .wishlist-btn.active {
            color: #ef4444 !important;
        }

            .wishlist-btn.active i {
                color: #ef4444 !important;
            }

    @@keyframes wishlistPulse {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.3);
        }

        100% {
            transform: scale(1);
        }
    }

    .wishlist-pulse {
        animation: wishlistPulse 0.4s ease-in-out;
    }
</style>

<!-- العرض في وضع الشبكة العادية -->
<div class="swiper-slide">
    <div class="w-full h-full">
        <div class="course-card-wrapper relative group h-full cursor-pointer">
            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden transition-all duration-300 hover:shadow-xl hover:-translate-y-2 group h-full flex flex-col" onclick="window.location='@Url.Action("Details", "Course", new { area = "Learner", id = Model.Id })'">
                <div class="relative overflow-hidden">
                    <img src="@Model.ThumbnailUrl" alt="@Model.Title" class="w-full h-40 object-cover transition-transform duration-500 group-hover:scale-110">
                    <div class="absolute inset-0 bg-gradient-to-t from-black to-transparent opacity-60"></div>

                    @if (Model.Discount > 0)
                    {
                        <span class="absolute top-2 left-2 bg-purple-500 text-white text-xs px-2 py-1 rounded">خصم @Model.Discount%</span>
                    }

                    <div class="absolute top-2 right-2">
                        <!-- زر المفضلة -->
                        <button onclick="event.stopPropagation(); toggleWishlist(@Model.Id, this)"
                                class="wishlist-btn absolute top-2 right-2 z-10 bg-white/90 dark:bg-gray-700/90 rounded-full p-2 shadow-md opacity-70 group-hover:opacity-100 group-hover:scale-110 transition duration-500 ease-out @(isCourseInWishlist ? "active" : "")">
                            <i class="@(isCourseInWishlist ? "fas fa-heart text-red-500" : "far fa-heart text-gray-500 dark:text-gray-300") transition-transform duration-300 group-hover:scale-125 group-hover:text-red-500"></i>
                        </button>
                    </div>



                    <div class="absolute bottom-2 left-2 flex items-center bg-blue-600 text-white px-2 py-1 rounded-full text-xs font-medium">
                        <i class="fas fa-star mr-1"></i>
                        <span>4.7</span>
                    </div>
                </div>

                <div class="p-4 flex-grow flex flex-col">
                    <h3 class="text-lg font-bold text-gray-800 dark:text-white mb-2 group-hover:text-blue-600 transition line-clamp-1">@Model.Title</h3>
                    <p class="text-gray-600 dark:text-gray-300 text-sm mb-3 line-clamp-2">@Model.ShortDescription</p>

                    @if (!(currentController == "Profile" && currentAction == "InstructorProfile" || currentAction == "Instructor"))
                    {
                        <div class="flex items-center mb-3 text-sm text-gray-500 dark:text-gray-400">
                            <i class="fas fa-user-tie ml-1"></i>
                            <span class="line-clamp-1">@Model.InstructorName</span>
                        </div>
                    }
                    <div class="mt-auto">
                        <div class="flex items-center gap-1 mb-2">
                            <i class="fas fa-star text-yellow-400 text-sm"></i>
                            <span class="text-sm font-medium">4.7</span>
                            <span class="text-gray-500 dark:text-gray-400 text-sm">(980)</span>
                        </div>

                        <div class="flex justify-between items-center">
                            @{
                                var finalPrice = Model.Price - (Model.Price * (Model.Discount ?? 0) / 100);
                            }
                            <div>
                                <span class="text-lg font-bold text-blue-600 dark:text-blue-400">@finalPrice.ToString("0") ج.م</span>
                                @if (Model.Discount > 0)
                                {
                                    <span class="text-sm text-gray-500 line-through block">@Model.Price.ToString("0") ج.م</span>
                                }
                            </div>

                            @if (isUserEnrolled)
                            {
                                <button class="text-white bg-green-600 px-3 py-2 rounded-lg text-sm cursor-default" disabled>
                                    <i class="fas fa-check-circle mr-1"></i> مسجل بالفعل
                                </button>
                            }
                            else if (isCourseInCart)
                            {
                                <button class="text-white bg-orange-500 px-3 py-2 rounded-lg text-sm cursor-default" disabled>
                                    <i class="fas fa-shopping-cart mr-1"></i> في السلة
                                </button>
                            }
                            else
                            {
                                <button onclick="event.stopPropagation(); addToCart(@Model.Id, this)"
                                        class="text-white bg-blue-600 hover:bg-blue-700 px-3 py-2 rounded-lg text-sm transition-colors add-to-cart-btn">
                                    <span class="btn-text">أضف إلى السلة</span>
                                    <span class="loading-spinner hidden">
                                        <i class="fas fa-spinner fa-spin"></i>
                                    </span>
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- عنصر الـ Hover (تم الحفاظ على التصميم الأصلي) -->
            <div class="course-hover-info absolute top-0 -left-4 transform -translate-x-full bg-white dark:bg-gray-800 rounded-xl shadow-2xl p-5 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300 z-30 w-72 border border-gray-200 dark:border-gray-700">
                <div class="absolute right-0 top-6 w-0 h-0 border-t-8 border-b-8 border-l-8 border-t-transparent border-b-transparent border-l-white dark:border-l-gray-800 transform translate-x-1"></div>
                <h3 class="font-bold text-xl mb-3 text-gray-800 dark:text-white">@Model.Title</h3>
                @if (!(currentController == "Profile" && currentAction == "InstructorProfile" || currentController == "Profile" && currentAction == "Instructor"))
                {
                    <div class="flex items-center gap-2 mb-1 text-sm text-gray-600 dark:text-gray-300">
                        <i class="fas fa-user-tie"></i>
                        <span>المدرب: @Model.InstructorName</span>
                    </div>
                }

                <div class="flex items-center gap-2 mb-4 text-sm">
                    <span class="text-gray-500 dark:text-gray-400">
                        <i class="fas fa-calendar-alt mr-1"></i> تم التحديث: @GetArabicMonthName(Model.CreatedAt.ToString("MMMM")) @Model.CreatedAt.ToString("yyyy")
                    </span>
                    <span class="text-gray-500 dark:text-gray-400">•</span>
                    <span class="text-gray-500 dark:text-gray-400">
                        <i class="fas fa-clock mr-1"></i> @FormatDuration(Model.Duration)
                    </span>
                </div>

                <ul class="text-base text-gray-700 dark:text-gray-300 mb-5 space-y-3">
                    @foreach (var learning in Model.Learnings.First().Split(new[] { '\n', ',' }, StringSplitOptions.RemoveEmptyEntries).Take(4))
                    {
                        <li class="flex items-start gap-3">
                            <i class="fas fa-check mt-1 text-blue-500 flex-shrink-0"></i>
                            <span>@learning.Trim()</span>
                        </li>
                    }
                </ul>

                <div class="course-hover-actions">
                    <div class="flex justify-between items-center">
                        <button onclick="event.stopPropagation(); toggleWishlist(@Model.Id, this)"
                                class="wishlist-btn text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 text-base flex items-center gap-2 transition-colors @(isCourseInWishlist ? "active" : "")">
                            <i class="@(isCourseInWishlist ? "fas fa-heart text-red-500" : "far fa-heart")"></i>
                            <span class="btn-text">@(isCourseInWishlist ? "في المفضلة" : "المفضلة")</span>
                            <span class="loading-spinner hidden">
                                <i class="fas fa-spinner fa-spin"></i>
                            </span>
                        </button>

                        @if (isUserEnrolled)
                        {
                            <button class="text-white bg-green-600 px-4 py-2 rounded-lg text-base cursor-default flex items-center gap-2" disabled>
                                <i class="fas fa-check-circle"></i> مسجل بالفعل
                            </button>
                        }
                        else if (isCourseInCart)
                        {
                            <button class="text-white bg-orange-500 px-4 py-2 rounded-lg text-base cursor-default flex items-center gap-2" disabled>
                                <i class="fas fa-shopping-cart"></i> في السلة
                            </button>
                        }
                        else
                        {
                            <button onclick="event.stopPropagation(); addToCart(@Model.Id, this)"
                                    class="text-white bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-lg text-base transition-colors flex items-center gap-2 add-to-cart-btn">
                                <span class="btn-text">أضف للسلة</span>
                                <span class="loading-spinner hidden">
                                    <i class="fas fa-spinner fa-spin"></i>
                                </span>
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // --- Update tooltip directions ---
        // Function to update tooltip directions
        function updateTooltipDirections() {
            const allSlides = document.querySelectorAll('.swiper-slide');
            const swiperContainer = document.querySelector('.swiper-container');
            if (!swiperContainer) return;

            const swiperRect = swiperContainer.getBoundingClientRect();
            allSlides.forEach((slide) => {
                const tooltip = slide.querySelector('.course-hover-info');
                if (!tooltip) return;
                tooltip.classList.remove('force-left', 'force-right');
                const slideRect = slide.getBoundingClientRect();
                if (slideRect.right > swiperRect.right - 300) {
                    tooltip.classList.add('force-left');
                } else if (slideRect.left < swiperRect.left + 300) {
                    tooltip.classList.add('force-right');
                }
            });
        }

        window.addEventListener('resize', updateTooltipDirections);
        window.addEventListener('scroll', updateTooltipDirections);
        document.querySelectorAll('.course-card-wrapper').forEach(wrapper => {
            wrapper.addEventListener('mouseenter', updateTooltipDirections);
        });
    });


</script>
<script>
        // دالة إضافة/إزالة من المفضلة
    async function toggleWishlist(courseId, buttonElement) {
        // تحديد الزر الذي تم النقر عليه
        let button;
        if (buttonElement) {
            button = buttonElement;
        } else {
            button = event.currentTarget;
        }

        const isCurrentlyActive = button.classList.contains('active');
        const action = isCurrentlyActive ? 'remove' : 'add';

        const icon = button.querySelector('i');
        const text = button.querySelector('.btn-text');
        const spinner = button.querySelector('.loading-spinner');

        // حفظ الحالة الأصلية
        const originalIconClass = icon.className;
        const originalText = text ? text.innerHTML : '';

        // Show loading state
        button.classList.add('loading');
        if (spinner) {
            spinner.classList.remove('hidden');
        }
        button.disabled = true;

        try {
            // الحصول على الـ token إذا كان موجوداً
            const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            const headers = {
                'Content-Type': 'application/json'
            };

            // إضافة الـ token فقط إذا كان موجوداً
            if (tokenElement) {
                headers['RequestVerificationToken'] = tokenElement.value;
            }

            // ✅ استخدام الـ URLs الصحيحة مع الـ Area
            const url = action === 'add'
                ? '/Learner/Wishlist/AddToWishlist'
                : '/Learner/Wishlist/RemoveFromWishlist';

            console.log(`Sending ${action} request to: ${url} for course: ${courseId}`);

            const response = await fetch(url, {
                method: 'POST',
                headers: headers,
                body: JSON.stringify({ courseId: courseId })
            });

            if (response.ok) {
                const result = await response.json();
                console.log('Wishlist response:', result);

                if (result.success) {
                    // تحديث حالة جميع الأزرار لهذا الكورس
                    updateAllWishlistButtons(courseId, action === 'add');

                    // تحديث العداد في الهيدر إذا كان موجود
                    const wishlistCount = document.querySelector('[data-wishlist-count]');
                    if (wishlistCount) {
                        wishlistCount.textContent = result.wishlistCount || 0;
                        wishlistCount.classList.add('wishlist-pulse');
                        wishlistCount.addEventListener('animationend', () => {
                            wishlistCount.classList.remove('wishlist-pulse');
                        }, { once: true });
                    }

                    // إظهار رسالة النجاح
                    const message = action === 'add'
                        ? 'تمت إضافة الدورة إلى المفضلة بنجاح'
                        : 'تمت إزالة الدورة من المفضلة بنجاح';
                    showSuccess(message);

                } else {
                    throw new Error(result.message || 'فشل العملية');
                }
            } else {
                const errorText = await response.text();
                throw new Error(`فشل في الاتصال بالخادم: ${response.status} - ${errorText}`);
            }
        } catch (error) {
            console.error('Error:', error);

            // إعادة الزر إلى حالته الأصلية
            if (spinner) {
                spinner.classList.add('hidden');
            }
            button.classList.remove('loading');

            if (icon) {
                icon.className = originalIconClass;
            }
            if (text) {
                text.innerHTML = originalText;
            }

            showError(error.message || 'حدث خطأ أثناء تحديث المفضلة');

            // إعادة تفعيل الزر بعد ثانيتين
            setTimeout(() => {
                button.disabled = false;
            }, 2000);
        }
    }

    // دالة لتحديث جميع أزرار المفضلة لهذا الكورس
    function updateAllWishlistButtons(courseId, isAdded) {
        // تحديث الأزرار في البطاقة الرئيسية
        const mainButtons = document.querySelectorAll(`button[onclick*="toggleWishlist(${courseId}"]`);

        mainButtons.forEach(button => {
            const icon = button.querySelector('i');
            const text = button.querySelector('.btn-text');

            if (isAdded) {
                // حالة الإضافة - قلب أحمر
                button.classList.add('active');
                if (icon) {
                    icon.className = 'fas fa-heart text-red-500';
                    // تأثير النبض
                    icon.classList.add('wishlist-pulse');
                    icon.addEventListener('animationend', () => {
                        icon.classList.remove('wishlist-pulse');
                    }, { once: true });
                }
                if (text) {
                    text.innerHTML = 'في المفضلة';
                }
            } else {
                // حالة الإزالة - قلب رمادي
                button.classList.remove('active');
                if (icon) {
                    icon.className = 'far fa-heart text-gray-500 dark:text-gray-300';
                }
                if (text) {
                    text.innerHTML = 'المفضلة';
                }
            }

            // إزالة حالة التحميل وإعادة تفعيل الزر
            button.classList.remove('loading');
            const spinner = button.querySelector('.loading-spinner');
            if (spinner) {
                spinner.classList.add('hidden');
            }
            button.disabled = false;
        });
    }

    // دالة مساعدة للتحقق من حالة المفضلة عند تحميل الصفحة
    async function checkWishlistStatus(courseId) {
        try {
            const response = await fetch(`/Learner/Wishlist/IsCourseInWishlist?courseId=${courseId}`);
            if (response.ok) {
                const result = await response.json();
                return result.isInWishlist || false;
            }
        } catch (error) {
            console.error('Error checking wishlist status:', error);
        }
        return false;
    }
    // Add to cart function for course cards
    async function addToCart(courseId, buttonElement = null) {
        // تحديد الزر الذي تم النقر عليه
        let button;
        if (buttonElement) {
            button = buttonElement;
        } else {
            button = event.currentTarget;
        }

        const originalText = button.querySelector('.btn-text') ? button.querySelector('.btn-text').innerHTML : button.innerHTML;
        const spinner = button.querySelector('.loading-spinner');

        // Show loading state
        if (spinner) {
            spinner.classList.remove('hidden');
            button.classList.add('loading');
        } else {
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> جاري الإضافة...';
        }
        button.disabled = true;

        try {
            // الحصول على الـ token إذا كان موجوداً
            const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            const headers = {
                'Content-Type': 'application/json'
            };

            // إضافة الـ token فقط إذا كان موجوداً
            if (tokenElement) {
                headers['RequestVerificationToken'] = tokenElement.value;
            }

            const response = await fetch('/Learner/Cart/AddToCart', {
                method: 'POST',
                headers: headers,
                body: JSON.stringify({ courseId: courseId, quantity: 1 })
            });

            if (response.ok) {
                const result = await response.json();

    if (result.success) {
        // Show success message using layout's notification system
        showSuccess(result.message || 'تمت إضافة الدورة إلى السلة بنجاح');

        // تحديث جميع الأزرار لهذا الكورس - استخدم اللون البرتقالي
        const buttons = document.querySelectorAll(`button[onclick*="addToCart(${courseId}"]`);
        buttons.forEach(button => {
            button.classList.remove('bg-blue-600', 'hover:bg-blue-700', 'bg-green-600', 'hover:bg-green-700');
            button.classList.add('bg-orange-500');
            button.innerHTML = '<i class="fas fa-shopping-cart mr-1"></i> في السلة';
            button.disabled = true;
            button.onclick = null; // إزالة event handler
        });

        // Update cart count in header
        const cartCount = document.querySelector('[data-cart-count]');
        if (cartCount) {
            cartCount.textContent = result.cartCount || result.totalItems;
            cartCount.classList.add('cart-pulse');
            cartCount.addEventListener('animationend', () => {
                cartCount.classList.remove('cart-pulse');
            }, { once: true });
        }

        // Button success state - استخدم اللون البرتقالي هنا أيضاً
        if (spinner) {
            button.classList.remove('loading', 'bg-blue-600');
            button.classList.add('bg-orange-500');
            spinner.classList.add('hidden');
            button.querySelector('.btn-text').innerHTML = '<i class="fas fa-shopping-cart mr-1"></i> في السلة';
        } else {
            button.innerHTML = '<i class="fas fa-shopping-cart mr-1"></i> في السلة';
            button.classList.add('bg-orange-500');
        }

        // لا داعي للعودة بعد ثانيتين لأننا نريد بقاء الزر على حالة "في السلة"
        button.disabled = true;
        button.onclick = null; // منع النقر مرة أخرى
    } else {
                    throw new Error(result.message || 'Failed to add to cart');
                }
            } else {
                // إذا كان الرد غير ناجح، حاول الحصول على الرسالة من الـ response
                let errorMessage = 'Failed to add to cart';
                try {
                    const errorResult = await response.json();
                    errorMessage = errorResult.message || errorMessage;
                } catch (e) {
                    // إذا فشل تحليل JSON، استخدم الرسالة الافتراضية
                }
                throw new Error(errorMessage);
            }
        } catch (error) {
            console.error('Error:', error);

            // Show error state
            if (spinner) {
                button.classList.remove('loading');
                spinner.classList.add('hidden');
                button.querySelector('.btn-text').innerHTML = '<i class="fas fa-times"></i> خطأ';
                button.classList.remove('bg-blue-600');
                button.classList.add('bg-red-600', 'hover:bg-red-700');
            } else {
                button.innerHTML = '<i class="fas fa-times"></i> خطأ';
                button.classList.add('bg-red-600', 'hover:bg-red-700');
            }

            showError(error.message || 'حدث خطأ أثناء إضافة الدورة إلى السلة');

            // Revert after 2 seconds
            setTimeout(() => {
                if (spinner) {
                    button.classList.remove('bg-red-600', 'hover:bg-red-700');
                    button.classList.add('bg-blue-600');
                    button.querySelector('.btn-text').innerHTML = originalText;
                } else {
                    button.innerHTML = originalText;
                    button.classList.remove('bg-red-600', 'hover:bg-red-700');
                }
                button.disabled = false;
            }, 2000);
        }
    }

    // دالة مساعدة لإضافة عنصر للسلة من أي مكان
    function addToCartFromAnywhere(courseId) {
        addToCart(courseId);
    }
</script>