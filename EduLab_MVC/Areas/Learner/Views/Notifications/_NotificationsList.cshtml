@model List<EduLab_MVC.Models.DTOs.Notifications.NotificationDto>
@functions {
    private string GetNotificationGradient(EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto type)
    {
        return type switch
        {
            EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.System => "from-purple-500 to-purple-600",
            EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.Promotional => "from-yellow-500 to-yellow-600",
            EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.Course => "from-blue-500 to-blue-600",
            EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.Enrollment => "from-green-500 to-green-600",
            EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.Reminder => "from-red-500 to-red-600",
            _ => "from-gray-500 to-gray-600"
        };
    }

    private string GetTypeBadgeClass(EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto type)
    {
        return type switch
        {
            EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.System => "bg-purple-100 text-purple-700 dark:bg-purple-900/30 dark:text-purple-300",
            EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.Promotional => "bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-300",
            EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.Course => "bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300",
            EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.Enrollment => "bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300",
            EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.Reminder => "bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-300",
            _ => "bg-gray-100 text-gray-700 dark:bg-gray-900/30 dark:text-gray-300"
        };
    }

    private string GetTypeText(EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto type)
    {
        return type switch
        {
            EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.System => "نظامي",
            EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.Promotional => "ترويجي",
            EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.Course => "كورس",
            EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.Enrollment => "تسجيل",
            EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.Reminder => "تذكير",
            _ => type.ToString()
        };
    }
} 
@if (!Model.Any())
{
    <div id="emptyNotifications" class="text-center py-16">
        <div class="floating inline-block mb-6">
            <div class="p-8 bg-gradient-to-r from-blue-100 to-indigo-100 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-3xl">
                <i class="fas fa-bell-slash text-5xl text-blue-600 dark:text-blue-400"></i>
            </div>
        </div>
        <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-3">لا توجد إشعارات</h3>
        <p class="text-gray-500 dark:text-gray-400 text-lg mb-6 max-w-md mx-auto">لم يتم العثور على أي إشعارات تطابق معايير البحث الخاصة بك</p>
        <button class="px-6 py-3 bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white rounded-2xl font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg">
            <i class="fas fa-sync-alt ml-2"></i>
            تحديث الصفحة
        </button>
    </div>
}
else
{
    <div class="space-y-4">
        @foreach (var notification in Model)
        {
            <div class="notification-card bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-100 dark:border-gray-700 p-6 transition-all duration-300 hover:shadow-xl relative@(notification.Status == EduLab_MVC.Models.DTOs.Notifications.NotificationStatusDto.Unread ? "unread-glow" : "")"
                 data-notification-id="@notification.Id"
                 onclick="markAsRead(@notification.Id)">

                @if (notification.Status == EduLab_MVC.Models.DTOs.Notifications.NotificationStatusDto.Unread)
                {
                    <div class="absolute top-4 left-4 w-3 h-3 bg-red-500 rounded-full animate-ping"></div>
                    <div class="absolute top-4 left-4 w-3 h-3 bg-red-500 rounded-full"></div>
                }

                <div class="flex items-start space-x-4 space-x-reverse">
                    <!-- Icon with gradient -->
                    <di class="flex-shrink-0">
                        <div class="p-4 rounded-2xl bg-gradient-to-br @GetNotificationGradient(notification.Type) shadow-lg group-hover:scale-110 transition-transform duration-300">
                            <i class="@notification.IconClass text-white text-xl"></i>
                        </div>
                    </di v>

                    <!-- Content -->
                    <div class="flex-1 min-w-0">
                        <div class="flex items-start justify-between mb-3">
                            <div class="flex-1">
                                <div class="flex items-center space-x-3 space-x-reverse mb-2">
                                    <h3 class="text-lg font-bold text-gray-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
                                        @notification.Title
                                    </h3>
                                    <span class="type-badge text-xs font-bold px-3 py-1 rounded-full @GetTypeBadgeClass(notification.Type)">
                                        @GetTypeText(notification.Type)
                                    </span>
                                </div>
                                <p class="text-gray-600 dark:text-gray-300 leading-relaxed text-sm">
                                    @notification.Message
                                </p>
                            </div>
                        </div>

                        <!-- Actions and Meta -->
                        <div class="flex items-center justify-between mt-4">
                            <div class="flex items-center space-x-4 space-x-reverse">
                                <span class="text-xs text-gray-500 dark:text-gray-400 flex items-center space-x-1 space-x-reverse">
                                    <i class="fas fa-clock"></i>
                                    <span>@notification.TimeAgo</span>
                                </span>
                                @if (
                                    !string.IsNullOrEmpty(notification.RelatedEntityId) &&
                                    (notification.Type == EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.Course ||
                                     notification.Type == EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.Promotional)
                                )
                                {
                                    <a href="@Url.Action("Details", "Course", new { area = "Learner", id = notification.RelatedEntityId })"
                                       class="text-xs bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400 px-3 py-1.5 rounded-xl hover:bg-blue-200 dark:hover:bg-blue-800 transition-colors">
                                        <i class="fas fa-eye ml-1"></i>
                                        عرض التفاصيل
                                    </a>
                                }

                            </div>

                            <button class="delete-notification opacity-0 group-hover:opacity-100 p-2 text-gray-400 hover:text-red-500 transition-all duration-300 transform hover:scale-110 rounded-xl hover:bg-red-50 dark:hover:bg-red-900/20"
                                    data-notification-id="@notification.Id"
                                    onclick="event.stopPropagation(); confirmDeleteNotification(@notification.Id, '@notification.Title.Replace("'", "\\'")')">
                                <i class="fas fa-times text-lg"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Hover effect overlay -->
                <div class="absolute inset-0 bg-gradient-to-r from-blue-500/5 to-indigo-500/5 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
            </div>
        }
    </div>
}
<script>
    function confirmDeleteNotification(notificationId, title) {
        showModal(
            'حذف الإشعار',
            `هل أنت متأكد من أنك تريد حذف الإشعار "${title}"؟`,
            function() { deleteNotification(notificationId); }
        );
    }

    async function deleteNotification(notificationId) {
        try {
            const response = await fetch(`@Url.Action("Delete", "Notifications")/${notificationId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            });

            if (response.ok) {
                // Remove the notification card with animation
                const notificationElement = document.querySelector(`[data-notification-id="${notificationId}"]`);
                if (notificationElement) {
                    notificationElement.style.opacity = '0';
                    notificationElement.style.transform = 'translateX(-100%)';
                    setTimeout(() => {
                        notificationElement.remove();
                        // Check if no notifications left
                        if (document.querySelectorAll('.notification-card').length === 0) {
                            location.reload();
                        }
                    }, 300);
                }
            } else {
                throw new Error('Failed to delete notification');
            }
        } catch (error) {
            console.error('Error:', error);
            showToast('حدث خطأ أثناء حذف الإشعار', 'error');
        }
    }

    async function markAsRead(notificationId) {
        try {
            const response = await fetch(`@Url.Action("MarkAsRead", "Notifications")/${notificationId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value,
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const notificationElement = document.querySelector(`[data-notification-id="${notificationId}"]`);
                if (notificationElement) {
                    // Remove unread styles
                    notificationElement.classList.remove('border-r-4', 'border-r-blue-500');

                    // Remove the unread indicator
                    const indicator = notificationElement.querySelector('.unread-indicator');
                    if (indicator) {
                        indicator.remove();
                    }

                    // Update the badge count
                    updateUnreadCount();
                }
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }

    function updateUnreadCount() {
        // Update the unread count in the UI
        const unreadCount = document.querySelectorAll('.unread-indicator').length;
        const unreadBadge = document.querySelector('[data-type="unread"] .bg-red-100');
        if (unreadBadge) {
            unreadBadge.textContent = unreadCount;
        }
    }
</script>
