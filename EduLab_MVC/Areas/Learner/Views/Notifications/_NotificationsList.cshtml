@model List<EduLab_MVC.Models.DTOs.Notifications.NotificationDto>

@if (!Model.Any())
{
    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-100 dark:border-gray-700 p-12 text-center">
        <div class="max-w-md mx-auto">
            <div class="p-4 bg-blue-100 dark:bg-blue-900 rounded-2xl inline-block mb-6">
                <i class="fas fa-bell-slash text-blue-600 dark:text-blue-400 text-4xl"></i>
            </div>
            <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-3">لا توجد إشعارات</h3>
            <p class="text-gray-500 dark:text-gray-400 text-lg mb-2">لم يتم العثور على أي إشعارات</p>
            <p class="text-gray-400 dark:text-gray-500">ستظهر الإشعارات الجديدة هنا عند توفرها</p>
        </div>
    </div>
}
else
{
    <div class="space-y-4">
        @foreach (var notification in Model)
        {
            <div class="notification-card bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-100 dark:border-gray-700 p-6 transition-all duration-300 hover:shadow-xl relative
                                @(notification.Status == EduLab_MVC.Models.DTOs.Notifications.NotificationStatusDto.Unread ? "border-r-4 border-r-blue-500" : "")"
                 data-notification-id="@notification.Id"
                 onclick="markAsRead(@notification.Id)">

                @if (notification.Status == EduLab_MVC.Models.DTOs.Notifications.NotificationStatusDto.Unread)
                {
                    <div class="unread-indicator"></div>
                }

                <div class="flex items-start space-x-4 space-x-reverse">
                    <!-- Icon -->
                    <div class="flex-shrink-0 @notification.ColorClass p-4 rounded-2xl">
                        <i class="@notification.IconClass text-2xl"></i>
                    </div>

                    <!-- Content -->
                    <div class="flex-1 min-w-0">
                        <div class="flex items-start justify-between mb-3">
                            <div class="flex-1">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-1">
                                    @notification.Title
                                </h3>
                                <p class="text-gray-600 dark:text-gray-300 leading-relaxed">
                                    @notification.Message
                                </p>
                            </div>
                            <div class="flex items-center space-x-3 space-x-reverse ml-4">
                                <span class="text-sm text-gray-500 dark:text-gray-400 whitespace-nowrap">
                                    @notification.TimeAgo
                                </span>
                                <button class="delete-notification text-gray-400 hover:text-red-500 transition-colors p-2 rounded-lg hover:bg-red-50 dark:hover:bg-red-900"
                                        data-notification-id="@notification.Id"
                                        onclick="event.stopPropagation(); confirmDeleteNotification(@notification.Id, '@notification.Title')">
                                    <i class="fas fa-times text-lg"></i>
                                </button>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(notification.RelatedEntityId))
                        {
                            <div class="flex items-center space-x-3 space-x-reverse mt-4">
                                <a href="@Url.Action("Details", "Course", new { area = "Learner", id = notification.RelatedEntityId })"
                                   class="inline-flex items-center space-x-2 space-x-reverse px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-xl transition-colors text-sm font-medium">
                                    <i class="fas fa-eye"></i>
                                    <span>عرض التفاصيل</span>
                                </a>

                                @if (notification.Type == EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.Course)
                                {
                                    <a href="@Url.Action("Enroll", "Courses", new { id = notification.RelatedEntityId })"
                                       class="inline-flex items-center space-x-2 space-x-reverse px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-xl transition-colors text-sm font-medium">
                                        <i class="fas fa-shopping-cart"></i>
                                        <span>التسجيل في الكورس</span>
                                    </a>
                                }
                            </div>
                        }
                    </div>
                </div>

                <!-- Notification Type Badge -->
                <div class="absolute top-4 left-4">
                    @{
                        var typeBadgeClass = notification.Type switch
                        {
                            EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.System => "bg-purple-100 text-purple-600 dark:bg-purple-900 dark:text-purple-400",
                            EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.Promotional => "bg-yellow-100 text-yellow-600 dark:bg-yellow-900 dark:text-yellow-400",
                            EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.Course => "bg-blue-100 text-blue-600 dark:bg-blue-900 dark:text-blue-400",
                            EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.Enrollment => "bg-green-100 text-green-600 dark:bg-green-900 dark:text-green-400",
                            EduLab_MVC.Models.DTOs.Notifications.NotificationTypeDto.Reminder => "bg-red-100 text-red-600 dark:bg-red-900 dark:text-red-400",
                            _ => "bg-gray-100 text-gray-600 dark:bg-gray-900 dark:text-gray-400"
                        };
                    }
                    <span class="text-xs font-medium px-3 py-1 rounded-full @typeBadgeClass">
                        @notification.Type.ToString()
                    </span>
                </div>
            </div>
        }
    </div>
}

<script>
    function confirmDeleteNotification(notificationId, title) {
        showModal(
            'حذف الإشعار',
            `هل أنت متأكد من أنك تريد حذف الإشعار "${title}"؟`,
            function() { deleteNotification(notificationId); }
        );
    }

    async function deleteNotification(notificationId) {
        try {
            const response = await fetch(`@Url.Action("Delete", "Notifications")/${notificationId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            });

            if (response.ok) {
                // Remove the notification card with animation
                const notificationElement = document.querySelector(`[data-notification-id="${notificationId}"]`);
                if (notificationElement) {
                    notificationElement.style.opacity = '0';
                    notificationElement.style.transform = 'translateX(-100%)';
                    setTimeout(() => {
                        notificationElement.remove();
                        // Check if no notifications left
                        if (document.querySelectorAll('.notification-card').length === 0) {
                            location.reload();
                        }
                    }, 300);
                }
            } else {
                throw new Error('Failed to delete notification');
            }
        } catch (error) {
            console.error('Error:', error);
            showToast('حدث خطأ أثناء حذف الإشعار', 'error');
        }
    }

    async function markAsRead(notificationId) {
        try {
            const response = await fetch(`@Url.Action("MarkAsRead", "Notifications")/${notificationId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value,
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const notificationElement = document.querySelector(`[data-notification-id="${notificationId}"]`);
                if (notificationElement) {
                    // Remove unread styles
                    notificationElement.classList.remove('border-r-4', 'border-r-blue-500');

                    // Remove the unread indicator
                    const indicator = notificationElement.querySelector('.unread-indicator');
                    if (indicator) {
                        indicator.remove();
                    }

                    // Update the badge count
                    updateUnreadCount();
                }
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }

    function updateUnreadCount() {
        // Update the unread count in the UI
        const unreadCount = document.querySelectorAll('.unread-indicator').length;
        const unreadBadge = document.querySelector('[data-type="unread"] .bg-red-100');
        if (unreadBadge) {
            unreadBadge.textContent = unreadCount;
        }
    }
</script>